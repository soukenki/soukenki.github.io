<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>データ構造-スタック</title>
    <url>/2023/01/18/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF/</url>
    <content><![CDATA[<img src="/images/SSS/SSS04001.png" width="70%" height="70%">

<p><strong>本文章については</strong>、Cプログラミングでスタックを実現し、スタックにおける概念などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>スタックの実現<ul>
<li>初期化</li>
<li>データを挿入</li>
<li>データを削除</li>
<li>トップデータを取得</li>
<li>データがあるかどうかを判断する</li>
<li>スタック内のデータ数を取得</li>
<li>スタックの破壊</li>
</ul>
</li>
</ul>
<br>

<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="概念と構造"></a>概念と構造</h1><p><img src="/images/SSS/SSS04001.png" alt="概念"><br>スタックとは、データ構造の一つであるリストの中で、特に挿入、削除がリストの先頭からしかできないものである。このような構造は、LIFO (Last In First Out 後入れ先出し）と呼ばれる。</p>
<p>スタックは、例で言えば、机上に積み上げられた本のような構造をしている。本は上に積み上げられていき、読みたい本は上から順に取っていかなければ取れないという点が、スタックと似ている。</p>
<br>

<h1 id="スタックの実現"><a href="#スタックの実現" class="headerlink" title="スタックの実現"></a>スタックの実現</h1><p>スタックの実装は、一般的には配列や連結リストを使って実装できますが、相対的に言えば、配列の構造の方が優れています。 配列の最後にデータを挿入するコストは比較的小さいためです。</p>
<p>Stackの構造：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// スタック構造 (動的)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> STDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	STDataType* _a;</span><br><span class="line">	<span class="type">int</span> _top;      <span class="comment">// トップ</span></span><br><span class="line">	<span class="type">int</span> _capacity;   <span class="comment">// 容量</span></span><br><span class="line">&#125;ST;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="初期化"><a href="#初期化" class="headerlink" title="初期化"></a>初期化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackInit</span><span class="params">(ST* ps)</span> <span class="comment">// 初期化</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	ps-&gt;_a = <span class="literal">NULL</span>;</span><br><span class="line">	ps-&gt;_top = <span class="number">0</span>;</span><br><span class="line">	ps-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データを挿入"><a href="#データを挿入" class="headerlink" title="データを挿入"></a>データを挿入</h2><p><img src="/images/SSS/SSS04002.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackPush</span><span class="params">(ST* ps, STDataType x)</span> <span class="comment">// 挿入</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_top == ps-&gt;_capacity)  <span class="comment">// 容量を拡大</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> newCapacity = ps-&gt;_capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;_capacity * <span class="number">2</span>;</span><br><span class="line">		STDataType* tmp = (STDataType*)<span class="built_in">realloc</span>(ps-&gt;_a, <span class="keyword">sizeof</span>(STDataType) * newCapacity);</span><br><span class="line">		<span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;realloc fail\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ps-&gt;_a = tmp;</span><br><span class="line">		ps-&gt;_capacity = newCapacity;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ps-&gt;_a[ps-&gt;_top] = x;</span><br><span class="line">	ps-&gt;_top++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データを削除"><a href="#データを削除" class="headerlink" title="データを削除"></a>データを削除</h2><p><img src="/images/SSS/SSS04003.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackPop</span><span class="params">(ST* ps)</span>  <span class="comment">//　消去</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(!StackEmpty(ps));</span><br><span class="line">	ps-&gt;_top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="トップデータを取得"><a href="#トップデータを取得" class="headerlink" title="トップデータを取得"></a>トップデータを取得</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">STDataType <span class="title function_">StackTop</span><span class="params">(ST* ps)</span> <span class="comment">//　トップデータを取得</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(!StackEmpty(ps));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ps-&gt;_a[ps-&gt;_top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データがあるかどうかを判断する"><a href="#データがあるかどうかを判断する" class="headerlink" title="データがあるかどうかを判断する"></a>データがあるかどうかを判断する</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(ST* ps)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">return</span> ps-&gt;_top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="スタック内のデータ数を取得"><a href="#スタック内のデータ数を取得" class="headerlink" title="スタック内のデータ数を取得"></a>スタック内のデータ数を取得</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StackSize</span><span class="params">(ST* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">return</span> ps-&gt;_top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="スタックの破壊"><a href="#スタックの破壊" class="headerlink" title="スタックの破壊"></a>スタックの破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackDestory</span><span class="params">(ST* ps)</span> <span class="comment">//　破壊</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="built_in">free</span>(ps-&gt;_a);</span><br><span class="line">	ps-&gt;_a = <span class="literal">NULL</span>;</span><br><span class="line">	ps-&gt;_top = <span class="number">0</span>;</span><br><span class="line">	ps-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/Stack">https://github.com/soukenki/Test_for_C/tree/master/Stack</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
  <entry>
    <title>データ構造-キュー</title>
    <url>/2023/01/18/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E3%82%AD%E3%83%A5%E3%83%BC/</url>
    <content><![CDATA[<img src="/images/SSS/SSS05001.png" width="70%" height="70%">

<p><strong>本文章については</strong>、、Cプログラミングでキューを実現し、キューにおける概念などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>キューの実現<ul>
<li>初期化</li>
<li>データを挿入</li>
<li>データを削除</li>
<li>ヘッドデータを取得</li>
<li>尾データを取得</li>
<li>データがあるかどうかを判断する</li>
<li>キュー内のデータ数を取得</li>
<li>キューの破壊</li>
</ul>
</li>
</ul>
<br>


<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="概念と構造"></a>概念と構造</h1><p><img src="/images/SSS/SSS05001.png" alt="概念"><br>キューとは、先頭が常に最も古い要素になるデータ構造で、新しい要素は必ず末尾に追加される。取り出すときは常に先頭の最も古い要素から取り出される。このように先に入れたものほど先に取り出される管理方式を「FIFO」（First-In First-Out&#x2F;先入れ先出し）という。</p>
<p>具体例なイメージは、人の行列を思い出してみてください</p>
<p>例えば、ディズニーランドでアトラクションを待っているとき、先に列に並んでいる人から、アトラクションに案内されますね</p>
<ul>
<li>ノードの接続・ノードの本体<br><img src="/images/SSS/SSS05002.png" alt="概念"><br></li>
</ul>
<h1 id="キューの実現"><a href="#キューの実現" class="headerlink" title="キューの実現"></a>キューの実現</h1><p>ノードの本体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span> // ノード</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* _<span class="title">next</span>;</span></span><br><span class="line">	QDataType _data;</span><br><span class="line">&#125;QNode;</span><br></pre></td></tr></table></figure>
<p>Queueの構造：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>  //　構造の入れ子</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//int size; //　ここでsizeを作成してサイズを記録することもできる</span></span><br><span class="line">	QNode* _head;</span><br><span class="line">	QNode* _tail;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="初期化"><a href="#初期化" class="headerlink" title="初期化"></a>初期化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueueInit</span><span class="params">(Queue* pq)</span>  <span class="comment">//　初期化</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	pq-&gt;_head = pq-&gt;_tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データを挿入"><a href="#データを挿入" class="headerlink" title="データを挿入"></a>データを挿入</h2><p><img src="/images/SSS/SSS05003.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueuePush</span><span class="params">(Queue* pq, QDataType x)</span> <span class="comment">// 挿入</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	QNode* newnode = (QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode)); <span class="comment">// 新しいノードを作成する</span></span><br><span class="line">	<span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc fail\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	newnode-&gt;_data = x;</span><br><span class="line">	newnode-&gt;_next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//　挿入</span></span><br><span class="line">	<span class="keyword">if</span> (pq-&gt;_tail == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pq-&gt;_head = pq-&gt;_tail = newnode; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		pq-&gt;_tail-&gt;_next = newnode;</span><br><span class="line">		pq-&gt;_tail = newnode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データを削除"><a href="#データを削除" class="headerlink" title="データを削除"></a>データを削除</h2><p><img src="/images/SSS/SSS05004.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueuePop</span><span class="params">(Queue* pq)</span>  <span class="comment">// 削除</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	assert(!QueueEmpty(pq));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pq-&gt;_head-&gt;_next == <span class="literal">NULL</span>) <span class="comment">// 最後のノードが残っているとき</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(pq-&gt;_head);</span><br><span class="line">		pq-&gt;_head = pq-&gt;_tail = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  <span class="comment">// ノードが複数ある場合</span></span><br><span class="line">	&#123;</span><br><span class="line">		Queue* next = pq-&gt;_head-&gt;_next;</span><br><span class="line">		<span class="built_in">free</span>(pq-&gt;_head);</span><br><span class="line">		pq-&gt;_head = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ヘッドデータを取得"><a href="#ヘッドデータを取得" class="headerlink" title="ヘッドデータを取得"></a>ヘッドデータを取得</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">QDataType <span class="title function_">QueueFront</span><span class="params">(Queue* pq)</span>  <span class="comment">// headデータを取得</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	assert(!QueueEmpty(pq));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pq-&gt;_head-&gt;_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="尾データを取得"><a href="#尾データを取得" class="headerlink" title="尾データを取得"></a>尾データを取得</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">QDataType <span class="title function_">QueueBack</span><span class="params">(Queue* pq)</span>  <span class="comment">//  tailデータを取得</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	assert(!QueueEmpty(pq));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pq-&gt;_tail-&gt;_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="データがあるかどうかを判断する"><a href="#データがあるかどうかを判断する" class="headerlink" title="データがあるかどうかを判断する"></a>データがあるかどうかを判断する</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">QueueEmpty</span><span class="params">(Queue* pq)</span>  <span class="comment">// 空であろうか</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	<span class="keyword">return</span> pq-&gt;_head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="キュー内のデータ数を取得"><a href="#キュー内のデータ数を取得" class="headerlink" title="キュー内のデータ数を取得"></a>キュー内のデータ数を取得</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">QueueSize</span><span class="params">(Queue* pq)</span> <span class="comment">//　size</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	QNode* cur = pq-&gt;_head;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (cur)</span><br><span class="line">	&#123;</span><br><span class="line">		++size;</span><br><span class="line">		cur = cur-&gt;_next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="キューの破壊"><a href="#キューの破壊" class="headerlink" title="キューの破壊"></a>キューの破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueueDestroy</span><span class="params">(Queue* pq)</span>  <span class="comment">// 破壊</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pq);</span><br><span class="line">	QNode* cur = pq-&gt;_head;</span><br><span class="line">	<span class="keyword">while</span> (cur)</span><br><span class="line">	&#123;</span><br><span class="line">		QNode* next = cur-&gt;_next;</span><br><span class="line">		<span class="built_in">free</span>(cur);</span><br><span class="line">		cur = next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pq-&gt;_head = pq-&gt;_tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>



<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/Queue">https://github.com/soukenki/Test_for_C/tree/master/Queue</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
  <entry>
    <title>データ構造-双方向循環リスト番兵ノードつけ</title>
    <url>/2022/12/30/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E5%8F%8C%E6%96%B9%E5%90%91%E5%BE%AA%E7%92%B0%E3%83%AA%E3%82%B9%E3%83%88%E7%95%AA%E5%85%B5%E3%83%8E%E3%83%BC%E3%83%89%E3%81%A4%E3%81%91/</url>
    <content><![CDATA[<p><img src="/images/SSS/SSS03001.png" alt="結果"><br><strong>本文章については</strong>、Cプログラミングで双方向循環リストを実現し、また番兵ノードもつける。双方向循環リストにおける概念や運用などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>双方向循環リストの実現<ul>
<li>動的ようにノードを生成</li>
<li>出力関数（テスト用）</li>
<li>尾にデータを挿入</li>
<li>ヘッドにデータを挿入</li>
<li>尾にデータを削除</li>
<li>ヘッドにデータを削除</li>
<li>pos位置の後ろにデータを挿入</li>
<li>pos位置の後ろにデータを削除</li>
<li>データの検索</li>
<li>双方向循環リストの破壊</li>
</ul>
</li>
<li>配列とリストの違い点</li>
</ul>
<br>

<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="概念と構造"></a>概念と構造</h1><p>双方向循環リスト番兵ノードつけ: 構造は単方向リストよりも複雑で、通常はデータを個別に格納するために使用されます。 実際に使用される連結リストのデータ構造は、リードを持つ双方向の循環連結リストです。 さらに、構造は複雑ですが、コードを使用して実装すると、構造が多くの利点をもたらし、実装が簡単であることがわかります。後でコードを実装するときにご覧ください。  </p>
<ul>
<li><p>双方向循環リスト番兵ノードつけ<br><img src="/images/SSS/SSS03001.png" alt="結果"></p>
</li>
<li><p>ノードの本体<br><img src="/images/SSS/SSS03002.png" alt="結果"></p>
</li>
<li><p>ノードなしの時<br><img src="/images/SSS/SSS03003.png" alt="結果"></p>
</li>
</ul>
<br>

<h1 id="双方向循環リストの実現"><a href="#双方向循環リストの実現" class="headerlink" title="双方向循環リストの実現"></a>双方向循環リストの実現</h1><p>返されたリンク リストのヘッド ノードを作成する。(連結リストの初期化)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LTNode* <span class="title function_">ListInit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	LTNode* phead = BuyListNode(<span class="number">-1</span>); <span class="comment">//　ヘッドノードに　-1　を入れる</span></span><br><span class="line">	phead-&gt;_prev = phead; <span class="comment">//　すべてが番兵ノードの自分自身を指している</span></span><br><span class="line">	phead-&gt;_next = phead;</span><br><span class="line">	<span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="動的ようにノードを生成"><a href="#動的ようにノードを生成" class="headerlink" title="動的ようにノードを生成"></a>動的ようにノードを生成</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LTNode* <span class="title function_">BuyListNode</span><span class="params">(LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	LTNode* node = (LTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LTNode));</span><br><span class="line">	<span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;malloc fail\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	node-&gt;_data = x;</span><br><span class="line">	node-&gt;_next = <span class="literal">NULL</span>;</span><br><span class="line">	node-&gt;_prev = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="出力関数（テスト用）"><a href="#出力関数（テスト用）" class="headerlink" title="出力関数（テスト用）"></a>出力関数（テスト用）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListPrint</span><span class="params">(LTNode* phead)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line"></span><br><span class="line">	LTNode* cur = phead-&gt;_next;</span><br><span class="line">	<span class="keyword">while</span> (cur != phead)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;_data);</span><br><span class="line">		cur = cur-&gt;_next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="尾にデータを挿入"><a href="#尾にデータを挿入" class="headerlink" title="尾にデータを挿入"></a>尾にデータを挿入</h2><p><img src="/images/SSS/SSS03004.png" alt="結果"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListPushBack</span><span class="params">(LTNode* phead, LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	ListInsert(phead, x);　<span class="comment">//　再利用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//LTNode* newnode = BuyListNode(x);</span></span><br><span class="line">	<span class="comment">//LTNode* tail = phead-&gt;_prev;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//tail-&gt;_next = newnode;</span></span><br><span class="line">	<span class="comment">//newnode-&gt;_prev = tail;</span></span><br><span class="line">	<span class="comment">//newnode-&gt;_next = phead;</span></span><br><span class="line">	<span class="comment">//phead-&gt;_prev = newnode;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="ヘッドにデータを挿入"><a href="#ヘッドにデータを挿入" class="headerlink" title="ヘッドにデータを挿入"></a>ヘッドにデータを挿入</h2><p><img src="/images/SSS/SSS03005.png" alt="結果"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListPushFront</span><span class="params">(LTNode* phead, LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	ListInsert(phead-&gt;_next, x); <span class="comment">//　再利用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//LTNode* newnode = BuyListNode(x);</span></span><br><span class="line">	<span class="comment">//LTNode* next = phead-&gt;_next;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//phead-&gt;_next = newnode;</span></span><br><span class="line">	<span class="comment">//newnode-&gt;_next = next;</span></span><br><span class="line">	<span class="comment">//next-&gt;_prev = newnode;</span></span><br><span class="line">	<span class="comment">//newnode-&gt;_prev = phead;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="尾にデータを削除"><a href="#尾にデータを削除" class="headerlink" title="尾にデータを削除"></a>尾にデータを削除</h2><p><img src="/images/SSS/SSS03006.png" alt="結果"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListPopBack</span><span class="params">(LTNode* phead)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	assert(!ListEmpty(phead)); <span class="comment">//　リストが空でない場合にしか続行しない</span></span><br><span class="line"></span><br><span class="line">	ListErase(phead-&gt;_prev);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//LTNode* tail = phead-&gt;_prev;</span></span><br><span class="line">	<span class="comment">//LTNode* tailPrev = tail-&gt;_prev;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//free(tail);</span></span><br><span class="line">	<span class="comment">//tailPrev-&gt;_next = phead;</span></span><br><span class="line">	<span class="comment">//phead-&gt;_prev = tailPrev;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="ヘッドにデータを削除"><a href="#ヘッドにデータを削除" class="headerlink" title="ヘッドにデータを削除"></a>ヘッドにデータを削除</h2><p><img src="/images/SSS/SSS03007.png" alt="結果"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListPopFront</span><span class="params">(LTNode* phead)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	assert(!ListEmpty(phead));<span class="comment">//　リストが空でない場合にしか続行しない</span></span><br><span class="line">	ListErase(phead-&gt;_next); <span class="comment">//　再利用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="pos位置の前にデータを挿入"><a href="#pos位置の前にデータを挿入" class="headerlink" title="pos位置の前にデータを挿入"></a>pos位置の前にデータを挿入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(LTNode* pos, LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pos);</span><br><span class="line">	LTNode* prev = pos-&gt;_prev;</span><br><span class="line">	LTNode* newnode = BuyListNode(x);</span><br><span class="line"></span><br><span class="line">	prev-&gt;_next = newnode;</span><br><span class="line">	newnode-&gt;_prev = prev;</span><br><span class="line">	newnode-&gt;_next = pos;</span><br><span class="line">	pos-&gt;_prev = newnode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="pos位置にデータを削除"><a href="#pos位置にデータを削除" class="headerlink" title="pos位置にデータを削除"></a>pos位置にデータを削除</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListErase</span><span class="params">(LTNode* pos)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pos);</span><br><span class="line">	LTNode* prve = pos-&gt;_prev;</span><br><span class="line">	LTNode* next = pos-&gt;_next;</span><br><span class="line"></span><br><span class="line">	prve-&gt;_next = next;</span><br><span class="line">	next-&gt;_prev = prve;</span><br><span class="line">	<span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="データの検索"><a href="#データの検索" class="headerlink" title="データの検索"></a>データの検索</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LTNode* <span class="title function_">ListFind</span><span class="params">(LTNode* phead, LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	LTNode* cur = phead-&gt;_next;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cur != phead)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (cur-&gt;_data == x) </span><br><span class="line">			<span class="keyword">return</span> cur; <span class="comment">// それを見つけた</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cur = cur-&gt;_next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 見つけていない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="双方向循環リストの破壊"><a href="#双方向循環リストの破壊" class="headerlink" title="双方向循環リストの破壊"></a>双方向循環リストの破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListDestory</span><span class="params">(LTNode* phead)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(phead);</span><br><span class="line">	LTNode* cur = phead-&gt;_next;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cur != phead) <span class="comment">// phead だけ残ったら終了</span></span><br><span class="line">	&#123;</span><br><span class="line">		LTNode* next = cur-&gt;_next; <span class="comment">//　ループ内のすべてのノードを解放する</span></span><br><span class="line">		<span class="built_in">free</span>(cur);</span><br><span class="line">		cur = next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(phead);</span><br><span class="line">	phead = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;破壊成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="配列とリストの違い点"><a href="#配列とリストの違い点" class="headerlink" title="配列とリストの違い点"></a>配列とリストの違い点</h1><table>
<thead>
<tr>
<th align="left">違い点</th>
<th align="left">配列</th>
<th align="center">リスト</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空間</td>
<td align="left">物理的に必ず連続している</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">動作時間</td>
<td align="left">O(1)</td>
<td align="center">O(N)</td>
</tr>
<tr>
<td align="left">要素を任意の位置に挿入または削除する</td>
<td align="left">要素を移動する必要がある場合があり、効率が低い O(N)</td>
<td align="center">指すようにポインターを変更するだけ</td>
</tr>
<tr>
<td align="left">挿入</td>
<td align="left">動的配列、スペースが足りない場合は拡張する必要がある</td>
<td align="center">容量の概念がない</td>
</tr>
<tr>
<td align="left">適用シナリオ</td>
<td align="left">エレメントの効率的な保管 + 頻繁なアクセス</td>
<td align="center">任意の位置での頻繁な挿入と削除</td>
</tr>
<tr>
<td align="left">キャッシュ使用率</td>
<td align="left">高い</td>
<td align="center">低い</td>
</tr>
</tbody></table>
<br>


<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/test_list2">https://github.com/soukenki/Test_for_C/tree/master/test_list2</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
  <entry>
    <title>C言語：初めの紹介-1</title>
    <url>/2022/11/29/C%E8%A8%80%E8%AA%9E%EF%BC%9A%E5%88%9D%E3%82%81%E3%81%AE%E7%B4%B9%E4%BB%8B-1/</url>
    <content><![CDATA[<p><strong>本文章については</strong>、　Cプログラミング をはじめに学んだ知識のフレームワークです。たとえば、この記事のループでは、while を簡単に紹介するだけです。ここまでが記事の前半で、後でさまざまな文法の詳細に特化した記事を更新して投稿します。興味のある方は、引き続きブログの更新に注目してください〜<br><strong>目次 &gt;</strong></p>
<ul>
<li>最初のCコード</li>
<li>データの種類</li>
<li>便利な関数 printf() の形式</li>
<li>コンピュータの単位</li>
<li>変数と定数<ul>
<li>2つの数値の合計を計算する</li>
<li>変数のスコープ</li>
<li>可変寿命</li>
<li>定数 (リテラル定数) (const 修飾された定数変数)<br>・定数（#defineで定義される識別子定数）</li>
<li>定数 (列挙定数)</li>
</ul>
</li>
<li>文字列<ul>
<li>文字列の長さを計算する strlen();</li>
<li>エスケープ文字<ul>
<li>‘\ddd’ 8 進数</li>
<li>‘\xdd’ 16 進数</li>
<li>ノート</li>
</ul>
</li>
</ul>
</li>
<li>選択文</li>
<li>ループ文</li>
</ul>
<span id="more"></span>
<br>

<h1 id="最初のCコード"><a href="#最初のCコード" class="headerlink" title="最初のCコード"></a>最初のCコード</h1><ul>
<li>.c ファイルは C 言語のソース ファイルである。</li>
<li>.h ファイルはヘッダー ファイルである。</li>
<li>stdio.h というファイルを含める</li>
<li>std-標準 standard標準 input入力 output出力</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// int は整数を意味し、main の前の int は、main 関数呼び出しの後に整数値が返されることを意味する。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> <span class="comment">// メイン関数 --&gt; プログラム エントリ --&gt; 1 つしかない</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ここでタスクを実行し、関数を入力する</span></span><br><span class="line"><span class="comment">  関数-print function - printf - は画面に出力関数である</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello こんにちは。\n&quot;</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01001.png" alt="結果"><br><br>  </p>
<h1 id="データの種類"><a href="#データの種類" class="headerlink" title="データの種類"></a>データの種類</h1><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">データタイプ</th>
<th align="center">サイズ</th>
</tr>
</thead>
<tbody><tr>
<td align="left">char</td>
<td align="left">文字型</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">短整数型</td>
<td align="center">2</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">整数型</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">長整数型</td>
<td align="center">4 または 8</td>
</tr>
<tr>
<td align="left">long long</td>
<td align="left">もっと長整数型</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">単精度浮動小数点数</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">倍精度浮動小数点数</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p>float を使用してデータを初期化する場合、データの後に f を追加すると、コンパイラはデフォルトで double 型になり、f を追加して float にする <br><br>文字の初期化: ‘w’ 文字列の初期化: “Name” → 記号の区別に注意</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;         <span class="comment">//char--字符类型</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);     <span class="comment">// %c--データを文字形式で出力 \n -- 改行を意味する</span></span><br><span class="line">        <span class="comment">/* %f--浮動小数点数 (10 進数) を出力する</span></span><br><span class="line"><span class="comment">           %p--メモリアドレスの形式で出力</span></span><br><span class="line"><span class="comment">           %x--16 進数を出力</span></span><br><span class="line"><span class="comment">           %o....*/</span></span><br><span class="line">        <span class="comment">//short int   //短整数型</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">20</span>;           <span class="comment">//整数型</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);    <span class="comment">// %d--整数の 10 進データを出力する</span></span><br><span class="line">        <span class="comment">//long 長整数型 </span></span><br><span class="line">        <span class="type">long</span>  nom = <span class="number">11100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nom);</span><br><span class="line">        </span><br><span class="line">        <span class="type">float</span> f = <span class="number">5.2</span>;     <span class="comment">//単精度浮動小数点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, f);</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> d = <span class="number">3.14</span>;    <span class="comment">//倍精度浮動小数点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, d);<span class="comment">//倍精度浮動小数点数を出力する場合、%f を使用すると精度が失われる可能性があるため、%lf を使用する方が適切である</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sizeof は括弧内のもののサイズを計算するために使用される</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>)); <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));<span class="comment">//2</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));<span class="comment">// 4/8 C言語標準 sizeof(long) &gt; または = sizeof(int) は問題ない, 4=4 8&gt;4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));<span class="comment">//8</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));<span class="comment">//8</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01002.png" alt="运行结果"><br><br>  </p>
<h1 id="便利な関数-printf-の形式"><a href="#便利な関数-printf-の形式" class="headerlink" title="便利な関数 printf() の形式"></a>便利な関数 printf() の形式</h1><ol>
<li>タイプ</li>
<li>ロゴ</li>
<li>出力最小幅</li>
<li>精度</li>
<li>長さ<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>, x); <span class="comment">//2桁になるように0を埋める 出力：09 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, x); <span class="comment">//スペースを埋めて3桁にする 出力：スペーススペース9</span></span><br></pre></td></tr></table></figure></li>
</ol>
<table>
<thead>
<tr>
<th align="left"><strong>1) タイプ</strong></th>
<th align="left"><strong>タイプ文字は、出力データのタイプを示すために使用され、その形式と意味を次の表に示します。</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">符号付き整数を 10 進形式で出力します (正の数は符号を出力しません); 補数コードが %d で出力される場合、元のコードを計算して出力する必要があります</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">printf(“%8d\n”,100); printf(“%6d\n”,100); printf(“%-8d\n”,100); printf(“%+8\n”,100 );</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">出力は次のとおりです。 “+” 右揃え</td>
</tr>
<tr>
<td align="left">%llu</td>
<td align="left">longlong unsigned 型を出力 (64 ビット プラットフォームが %d を出力する場合)</td>
</tr>
<tr>
<td align="left">%ld</td>
<td align="left">長整数出力</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">符号なし整数を 8 進数形式で出力します (プレフィックス 0 は出力しません)</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">整数を 16 進数の形式で出力するか、文字列のアドレスを出力します (数値のみを出力します。0x1234 などの形式で出力したい場合は、この形式で出力するには %#x が必要です)</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">符号なし型データ (符号なし数値) を 10 進数で出力します。 注: %d と %u には符号なしの値の範囲、つまり制限値があります。そうしないと、値が正しく出力されません。</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">文字を出力</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">文字列を出力</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">実数を 10 進形式で出力、デフォルトでは小数点以下 6 桁、%.2f を使用すると小数点以下 2 桁を確保 (同様に 1~6) c &#x3D; (float)a &#x2F; b ;&#x2F;&#x2F;ここで強制型変換、フォームの結果を省略せず、小数点以下の数字を表示する</td>
</tr>
<tr>
<td align="left">%lf</td>
<td align="left">倍精度浮動小数点数の場合、%f を使用すると精度が失われる可能性があるため、%lf</td>
</tr>
<tr>
<td align="left">%100f</td>
<td align="left">小数点以下 100 桁の実数を出力します。</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">数値形式で実数を出力</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">サイズに応じて f 形式または e 形式を自動的に選択し、無意味なゼロを出力しない</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">印刷アドレス</td>
</tr>
<tr>
<td align="left"><strong>2) フラグ</strong></td>
<td align="left"><strong>フラグ文字は、-、+、#、およびスペースであり、その意味は次の表に示されています:</strong></td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">結果を左揃え、右にスペースを埋める</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">出力記号 (プラスまたはマイナス記号)</td>
</tr>
<tr>
<td align="left">スペース</td>
<td align="left">正の場合は出力値の前にスペースが、負の場合はマイナス記号が先行します。</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">クラス c、s、d、u には影響しません;</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">クラス o の場合、出力時にプレフィックス 0 を付けます。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">クラス x の場合、出力時にプレフィックス 0x を付けます。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">e、g、f クラスの場合、結果に小数点がある場合にのみ小数点が与えられます</td>
</tr>
<tr>
<td align="left"><strong>3) 出力の最小幅</strong></td>
<td align="left"><strong>出力の最小桁数を示すために 10 進整数が使用されます。 実際の桁数が定義幅よりも多い場合は、実際の桁数に応じて出力され、実際の桁数が定義幅よりも小さい場合は、スペースまたは 0 で埋められます。</strong></td>
</tr>
<tr>
<td align="left"><strong>4) 精度</strong></td>
<td align="left"><strong>精度形式指定子は “.” で始まり、その後に 10 進整数が続きます。 この項目の意味: 出力が数値の場合は小数点以下の桁数を示し、出力が文字の場合は出力文字数を示し、実際の桁数が定義された精度の数値よりも大きい場合は、 、余分な部分は切り捨てられます。</strong></td>
</tr>
<tr>
<td align="left"><strong>5) 長さ</strong></td>
<td align="left"><strong>長さの書式指定子は h と l です.h は短整数として出力することを意味し、l は長整数として出力することを意味します.</strong></td>
</tr>
</tbody></table>
<br>  

<h1 id="コンピュータの単位"><a href="#コンピュータの単位" class="headerlink" title="コンピュータの単位"></a>コンピュータの単位</h1><ul>
<li><p>2 バイト — 16 ビット 2^16-1</p>
<ul>
<li>4 バイト — 32 ビット 2^32-1</li>
</ul>
</li>
<li><p>ビット — ビット最小、1 ビットは 1 または 0 の 1 つだけを保持できます</p>
</li>
<li><p>バイト — バイト 1 バイト &#x3D; 8 ビットのサイズ。</p>
<ul>
<li>kb — 1024 バイト</li>
<li>mb — 1024kb</li>
<li>gb—1024mb</li>
<li>tb — 1024 GB</li>
<li>正電荷 — 1</li>
<li>負電荷 — 0</li>
</ul>
<p>　　
  </p>
</li>
<li><p>バイナリ: (0 と 1 のみ)　　</p>
</li>
<li><p>10 進法: 0123456789 日常の数字</p>
</li>
<li><p>16 進数: 時間 (1 サイクル 12 時間)</p>
</li>
<li><p>16 進数: 1 週間 (1 サイクル 7 日)</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">short</span> age = <span class="number">20</span>;<span class="comment">//メモリに 2 バイトを適用 = 16 ビットで 20 の値を格納</span></span><br><span class="line">        <span class="type">float</span> weight = <span class="number">95.6f</span>;<span class="comment">//メモリに 4 バイトを適用し、10 進数を格納し、値の後に f を追加して 95.6 を指定します。この値は float 型である</span></span><br><span class="line">        <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="変数と定数"><a href="#変数と定数" class="headerlink" title="変数と定数"></a>変数と定数</h1><ul>
<li>定数：学籍番号、ID番号…定数値</li>
<li>変数: 年齢、体重…変数値、C 言語には 2 つの異なるタイプの変数がある (<em><strong>ローカル変数、グローバル変数</strong></em>)</li>
</ul>
<figure class="highlight c"><figcaption><span>変数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> num1 = <span class="number">20</span>;<span class="comment">//グローバル変数-コードブロック&#123;&#125;以外の変数を定義します。</span></span><br><span class="line"><span class="type">int</span> num2; <span class="comment">//グローバル変数を初期化しないと、デフォルトは0に初期化されます。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">10</span>;<span class="comment">//ローカル変数 - コード ブロック内で定義された変数 &#123;&#125;; 名前が同じ場合、この行を削除してグローバル変数を直接表示します</span></span><br><span class="line">        <span class="type">int</span> a; <span class="comment">//ローカル変数が初期化されていない場合、デフォルトでランダムな値になります</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num1);<span class="comment">//ローカル変数とグローバル変数の名前はできるだけ同じにしないでください。誤解しやすく、バグの原因となります。</span></span><br><span class="line">                         <span class="comment">//ローカル変数とグローバル変数が同じ名前の場合、ローカル変数が最初に表示されます。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01003.png" alt="結果"></p>
<br>  

<h2 id="2つの数値の合計を計算する"><a href="#2つの数値の合計を計算する" class="headerlink" title="2つの数値の合計を計算する"></a>2つの数値の合計を計算する</h2><ul>
<li>scanf 関数に関するエラーの報告</li>
<li>プロジェクトの先頭に追加:　#define _CRT_SECURE_NO_WARNINGS 1　　<br><img src="/images/c/c01004.png" alt="結果"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;   <span class="comment">//C 言語の文法では、変数は現在のコード ブロックの先頭で定義する必要があると規定されています</span></span><br><span class="line">         <span class="comment">/* 入力データ - 入力関数 scanf を使用</span></span><br><span class="line"><span class="comment">         vs2019 に (_s) を追加</span></span><br><span class="line"><span class="comment">         scanf_s() の機能は scanf() と同じですが、scanf() よりも安全です。</span></span><br><span class="line"><span class="comment">         scanf_s() は、「scanf() が文字列を読み取るときに境界をチェックしないため、メモリ リークが発生する可能性がある」という問題のために設計されているためです。</span></span><br><span class="line"><span class="comment">         scanf_s() を使用して文字列を読み取る場合、オーバーフローを防ぐために読み取る最大文字数を示す数値を指定する必要があります。</span></span><br><span class="line"><span class="comment">         [scanf_s()] これはvsにしか使えない、他のソフトは非対応、クロスプラットフォームがないので使わないようにして、</span></span><br><span class="line"><span class="comment">         コンパイラがエラーを報告しないように、ソース ファイルの先頭に #define _CRT_SECURE_NO_WARNINGS 1 を追加します*/</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);<span class="comment">//アドレス シンボル &amp; scanf によって入力された値が大きすぎる場合でも、メモリに強制的に格納され、オーバーフローが発生します。</span></span><br><span class="line">        sum = num1 + num2;       <span class="comment">//scanf は、ターゲット スペースが収まるかどうかは気にしません。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);<span class="comment">//%d の前の (sum=) がデバッグに表示されます</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>　　<br>while(scanf(“%d”,&amp;a) &#x3D;&#x3D; 1) &#x2F;&#x2F;scanf が入力情報を正常に読み取った場合、戻り値は 1; 入力情報を読み取ることができなかった場合、戻り値は EOF EOF 値は -1　　</p>
<p>while(scanf(“%d”,&amp;a) !&#x3D; EOF) プログラムを終了するには、ctrl + z を押します</p>
<br>  

<h2 id="変数のスコープ"><a href="#変数のスコープ" class="headerlink" title="変数のスコープ"></a>変数のスコープ</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> global = <span class="number">2020</span>;<span class="comment">// グローバル変数のスコープはプロジェクト全体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;test()--%d\n&quot;</span>, global);<span class="comment">// ここでは実行せず、宣言するだけです</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="type">int</span> num = <span class="number">0</span>;  <span class="comment">// ローカル変数のスコープは、ローカル変数が &#123;&#125; でのみ機能することです</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);<span class="comment">//　printf(&quot;num=%d\n&quot;, num); を変数 int num = 0; の &#123;&#125; の外に移動すると動作しません</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;global=%d\n&quot;</span>, global);</span><br><span class="line">        test();<span class="comment">//mainでvoid関数が呼ばれるので実行される</span></span><br><span class="line">         <span class="comment">//同じプロジェクトで、異なるソース ファイルにグローバル変数 int g_val = 2021 があります。</span></span><br><span class="line">         <span class="comment">//extern外部シンボル(他のソースファイルのグローバル変数)の宣言</span></span><br><span class="line">        <span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;g_val=%d\n&quot;</span>, g_val);  <span class="comment">//このときg_val=2021と表示されます</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>  

<h2 id="変数のライフサイクル"><a href="#変数のライフサイクル" class="headerlink" title="変数のライフサイクル"></a>変数のライフサイクル</h2><p><em>ローカル変数のライフサイクルは {} にありますが、グローバル変数のライフサイクルはプログラム全体のライフサイクルです</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        &#123;<span class="comment">// ライフサイクルの開始</span></span><br><span class="line">               <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);<span class="comment">//ok  </span></span><br><span class="line">        &#125;<span class="comment">// ライフサイクルの終わり</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);<span class="comment">//エラー</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="定数-リテラル定数-const-修飾された定数変数"><a href="#定数-リテラル定数-const-修飾された定数変数" class="headerlink" title="定数 (リテラル定数) (const 修飾された定数変数)"></a>定数 (リテラル定数) (const 修飾された定数変数)</h2><p>const - 定数プロパティ</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//const-constant プロパティ、</span></span><br><span class="line">        <span class="comment">//const int n = 10;//n は変数ですが、定数属性を持っているため、n は定数変数であると言えます</span></span><br><span class="line">        <span class="comment">//int arr[10] = &#123; 0 &#125;;//配列 [] は定数値を使用して実行する必要があり、定数変数に置き換えることはできません</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;<span class="comment">//int num は num を 4 として定義します。これは変数に属し、前に const が追加され、const によって変更された定数変数になります。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">        num = <span class="number">8</span>;<span class="comment">//前の int num=4 は変数であり、実行できます。 ただし、const を追加して定数変数にする場合、num=8 はエラーになります。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">        <span class="number">3</span>;<span class="comment">// リテラル定数</span></span><br><span class="line">        <span class="number">3.14</span>;<span class="comment">// リテラル定数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="定数（-defineで定義される識別子定数）"><a href="#定数（-defineで定義される識別子定数）" class="headerlink" title="定数（#defineで定義される識別子定数）"></a>定数（#defineで定義される識別子定数）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">              <span class="comment">//#define 定義済み識別子定数 (マクロ定義を定義)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10 <span class="comment">// MAX という定数シンボルを定義し、次の 10 は 10 として定義されていることを意味します</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> arr[MAX] = &#123;<span class="number">0</span>&#125;;<span class="comment">// definer で定義した定数を配列[]で使用可能</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MAX); <span class="comment">// 出力：10</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="定数-列挙定数"><a href="#定数-列挙定数" class="headerlink" title="定数 (列挙定数)"></a>定数 (列挙定数)</h2><figure class="highlight c"><figcaption><span>（例1：）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列挙定数</span></span><br><span class="line"><span class="comment">// 列挙 - 1 つずつリストします (性別: 男性、女性、内密。三原色: 赤、黄、青。)</span></span><br><span class="line"><span class="comment">// 列挙キーワード - enum</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>           //性別:</span> 男性、女性、内密。</span><br><span class="line">&#123;</span><br><span class="line">        MALE,</span><br><span class="line">        FEMALE,</span><br><span class="line">        SECRET</span><br><span class="line">&#125;;               <span class="comment">//MALE,FEMALE,SECRETこれらの 3 つの値 - 列挙定数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//enum Sex s = MALE;//sという人は男性です</span></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;<span class="comment">//列挙値は設定値のみを取ることができます: MALE、FEMALE、SECRET のいずれか 1 つだけ</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MALE);<span class="comment">//列挙定数には値があり、デフォルトの順序は 0、1、2... で、変更できません</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FEMALE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SECRET);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01005.png" alt="运行结果"></p>
<figure class="highlight c"><figcaption><span>（例2：）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span>  //三原色:</span> 赤、黄、青。</span><br><span class="line">&#123;</span><br><span class="line">        RED,</span><br><span class="line">        YELLOW,</span><br><span class="line">        BLUE</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">color</span> =</span> BLUE;<span class="comment">// color という名前の色は青 BLUE</span></span><br><span class="line">        color = YELLOW;<span class="comment">//この色は単なるアイテムの名前であり、変数であり、変更できます</span></span><br><span class="line">        <span class="comment">//BLUE = 6;//これは列挙型で定義された定数で、デフォルトでは 0, 1, 2 でなければなりません... 色自体は変更できないため、エラー</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>  

<h1 id="文字列"><a href="#文字列" class="headerlink" title="文字列"></a>文字列</h1><p>文字列 — “”で囲まれた文字<br>‘\0’ — エスケープ文字 — 0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>                  <span class="comment">// 0-数字0</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                        <span class="comment">// &#x27;0&#x27; --&gt; 文字 0、ASCII 値: 48</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;<span class="comment">//配列</span></span><br><span class="line">        <span class="comment">//　&quot;abc&quot; は &#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27;&#x27;\0&#x27;------&#x27;\0&#x27; 文字列終了マークと同等です</span></span><br><span class="line">        <span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125; には &#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27; のみがあり、終了記号はありません。 そのため、&#123;&#125; を使用して文字列を入力する場合は、文字の終わりを意味する &#x27;\0&#x27; または 0 を追加する必要があります。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);<span class="comment">//　%s で文字列を出力</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);<span class="comment">//　\0 が見つからない場合は、逆方向に読み取り続け、エラーが発生します。</span></span><br><span class="line">        <span class="string">&quot;hello bit&quot;</span>;</span><br><span class="line">        <span class="string">&quot;&quot;</span>;<span class="comment">//　空の文字列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// データがコンピュータに保存されるときは、バイナリで保存されます</span></span><br><span class="line">         <span class="comment">// 各文字には対応する値があります #aA$hud... 例: a-97 A-65 \0-0 ...</span></span><br><span class="line">         <span class="comment">// ASCII エンコード、各文字には ASCII コードがあります</span></span><br><span class="line">         <span class="comment">// ASCII コード値、各 ASCII コードに対応する値</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01006.png" alt="結果"><br><br>  </p>
<h2 id="文字列の長さを計算する-strlen"><a href="#文字列の長さを計算する-strlen" class="headerlink" title="文字列の長さを計算する strlen();"></a>文字列の長さを計算する strlen();</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//strlen関数のヘッダファイル（長さ計算用ヘッダファイル）</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;<span class="comment">//長さ：3</span></span><br><span class="line">        <span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;<span class="comment">//長さ：\0 がない場合、結果はランダムな値になります。&#x27;\0&#x27; を追加すると、長さは 3 になります。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr1));<span class="comment">//strlen - string length - 文字列の長さを計算するために使用されます</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/c/c01007.png" alt="結果"></p>
<ul>
<li>ここの \0 はエスケープ文字です。つまり、文字の前に「\」を追加して、文字の本来の意味を変更します。</li>
<li>例: ‘\n’ - リテラルの ‘n’ から ‘改行’ の意味へ、<ul>
<li>‘\t’ –&gt; ‘水平タブ’,</li>
<li>‘\r’ –&gt; ‘Enter’ …..</li>
</ul>
</li>
</ul>
<p><em><strong>(詳しくは下記のエスケープ文字ルール表をご覧ください)</strong></em><br><br>  </p>
<h2 id="エスケープ文字"><a href="#エスケープ文字" class="headerlink" title="エスケープ文字"></a>エスケープ文字</h2><table>
<thead>
<tr>
<th align="left">エスケープ文字</th>
<th align="left">意味</th>
<th align="left">ASCII コード値 (10 進数)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\a</td>
<td align="left">ベル (BEL)、警告文字</td>
<td align="left">007</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">バックスペース (BS)、現在位置を前の列に移動</td>
<td align="left">008</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">フォーム フィード (FF)、現在の位置を次のページの先頭に移動</td>
<td align="left">012</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">改行 (LF)、現在位置を次の行の先頭に移動</td>
<td align="left">010</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">キャリッジ リターン (CR)、現在位置を行頭に移動</td>
<td align="left">013</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平タブ (HT) (次のタブ位置にジャンプ)</td>
<td align="left">009</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直タブ (VT)</td>
<td align="left">011</td>
</tr>
<tr>
<td align="left">\\</td>
<td align="left">はバックスラッシュ文字 ‘ \‘ を表します</td>
<td align="left">092</td>
</tr>
<tr>
<td align="left">\‘</td>
<td align="left">は一重引用符 (アポストロフィ) 文字を表します</td>
<td align="left">039</td>
</tr>
<tr>
<td align="left">\“</td>
<td align="left">は二重引用符を表します</td>
<td align="left">034</td>
</tr>
<tr>
<td align="left">\?</td>
<td align="left">疑問符を表すため、3 文字の単語として認識されません (are you ok??)&#x3D;&gt;(are you ok] ??) &#x3D;&gt; ]</td>
<td align="left">063</td>
</tr>
<tr>
<td align="left">\0</td>
<td align="left">ヌル文字 (NUL)</td>
<td align="left">000</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">ddd は 1~3 の 8 進数</td>
<td align="left">3 桁の 8 進数</td>
</tr>
<tr>
<td align="left">\xdd</td>
<td align="left">dd は 2 桁の 16 進数を意味します</td>
<td align="left">16 進数</td>
</tr>
</tbody></table>
<figure class="highlight c"><figcaption><span>例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;c:\\2013\\music\\zhou.mp3&quot;</span>);<span class="comment">//システムが「\」をエスケープ文字として解釈しないようにするには、「\」を「\\」と記述します。</span></span><br><span class="line">        <span class="comment">//このとき得られる結果は c:\2013\music\zhou.mp3 のようなアドレスです</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>);<span class="comment">//同様に、&#x27;--&gt;\&#x27; を使用して記号を表示できます&#x27;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);<span class="comment">//文字列も同様です</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="‘-ddd’-8-進数"><a href="#‘-ddd’-8-進数" class="headerlink" title="‘\ddd’ 8 進数"></a>‘\ddd’ 8 進数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>  <span class="comment">//長さを計算するためのヘッダー ファイル</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;c:\test\32\test.c&quot;</span>));<span class="comment">//長さは 13 ですが、なぜ 13 なのですか? \t は 1 文字として数えます</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\32&#x27;</span>);<span class="comment">//「→」を表示</span></span><br><span class="line">        <span class="comment">// \32 -- 32 は 2 つの 8 進数 (8、9 およびその他の 7 を超える値は表示できません) 3*8^1+2*8^0 = 24+2 =26 26 は ASCII コード &#x27;→&#x27;</span></span><br><span class="line">        <span class="comment">// 8 進数として 32 --&gt; 10 進数、10 進数 --&gt; ASCII コード値に対応する文字</span></span><br><span class="line">        <span class="comment">// 32--&gt;10 進数 26-&gt;ASCII コード値で表される文字として</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\132&#x27;</span>);<span class="comment">//&#x27;Z&#x27;を表示</span></span><br><span class="line">                           <span class="comment">//  8 進数：\132 --  1*8^2+3*8^1+2*8^0 = 64+24+2 = 90 --&gt; ASCIIコード値は：&#x27;Z&#x27;</span></span><br><span class="line">        <span class="comment">//したがって、\32 は文字 &#x27;→&#x27; です。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="‘-xdd’-16-進数"><a href="#‘-xdd’-16-進数" class="headerlink" title="‘\xdd’ 16 進数"></a>‘\xdd’ 16 進数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>            <span class="comment">//&#x27;\&#x27; の後ろの数字は数字のみ: 8 進数; &#x27;\x&#x27; と数字の場合: 16 進数。</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\x61&#x27;</span>);<span class="comment">//16 進数アルゴリズム：\x61 -- 6*16^1+1*16^0 = 96+1= 97 --&gt; ASCIIコード値は：&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//16 進数を 10 進数に変更し、対応する ASCII コード値に対応させます。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="ノート"><a href="#ノート" class="headerlink" title="ノート"></a>ノート</h3><ul>
<li>C言語スタイル: &#x2F;*xxxxxxxx*&#x2F;<ul>
<li>短所: ネスト (&#x2F;*xxxx&#x2F;*xx*&#x2F;xxxx*&#x2F;) をサポートしていません。後半部分はノートされていません。</li>
</ul>
</li>
<li>C++ スタイル: &#x2F;&#x2F;xxxxxxxxxxx<ul>
<li>1 行または複数行のノートを付けることができます (推奨)<br></li>
</ul>
</li>
</ul>
<h1 id="選択文"><a href="#選択文" class="headerlink" title="選択文"></a>選択文</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大学にいる\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;君は努力してるの？入力してください(1,0)&gt;:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);     <span class="comment">//入力機能、選択入力 1/0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == input)        <span class="comment">//if-場合    1 つの「=」は代入を意味し、2 つの「=」はそれらが等しいかどうかを判断することを意味します。</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;良いoffer\n&quot;</span>);</span><br><span class="line">        <span class="comment">//else                   //else-他の</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == input)   <span class="comment">//こいうふうにも使えます</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;無職\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="ループ文"><a href="#ループ文" class="headerlink" title="ループ文"></a>ループ文</h1><ol>
<li>while演算子</li>
<li>for演算子</li>
<li>do…while演算子</li>
</ol>
<figure class="highlight c"><figcaption><span>while例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大学にいる\n&quot;</span>);</span><br><span class="line">        <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (line &lt; <span class="number">20000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;プログラミングをする量:%d\n&quot;</span>,line);</span><br><span class="line">                       line++;   <span class="comment">//変数の値を 1 増やします。同様に、「--」は値を 1 減らします</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (line &gt;= <span class="number">20000</span>)         <span class="comment">//&gt;または= 20000までループし続ける</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;良いoffer\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<p>(この文章はまだ終わっていません。引き続き「 C言語：初めの紹介-２」を参照してください)</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
      <categories>
        <category>C言語</category>
      </categories>
      <tags>
        <tag>C文法</tag>
      </tags>
  </entry>
  <entry>
    <title>はじめまして</title>
    <url>/2022/11/23/%E3%81%AF%E3%81%98%E3%82%81%E3%81%BE%E3%81%97%E3%81%A6/</url>
    <content><![CDATA[<h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul>
<li>自己紹介</li>
<li>目標</li>
<li>興味など</li>
<li>ソースコード庫</li>
</ul>
<span id="more"></span>


<h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>こんにちは。<br>ソウ　ケンキと申します。<br>このブログは、自分としてIT技術の理解や活用など情報をまとめるモノです。</p>
<p>今日本の大学で情報について、様々な知識を勉強しています。<br>主に、C&#x2F;C++・Linuxなどの学習をやっています。</p>
<p>私の性格は楽観的で明るいです。趣味は旅行、グルメ、音楽、釣りなどです。若し、皆さんは私のブログに対して、何かアドバイスや質問があれば、ぜひメール・LineやWeChatで連絡してください。  
　　</p>
<h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>一生懸命に勉強して、様々な知識を身につけるようになります。将来的には社会に役立つ、人々の生活を変えながら、生活をより便利にする製品を開発することができるように目指しています。</p>
<h2 id="掲示板"><a href="#掲示板" class="headerlink" title="掲示板"></a>掲示板</h2><p>最後に、自分の興味として旅行や美食などの写真シェアを掲示します。</p>
<p><img src="/images/lvxing_1.png"></p>
<ul>
<li>瑞龍寺</li>
</ul>
<p><img src="/images/lvxing_1_1.png"></p>
<ul>
<li>高岡大佛</li>
</ul>
<p><img src="/images/food_1.png"></p>
<ul>
<li>和牛ステーキ</li>
</ul>
<h2 id="ソースコード庫"><a href="#ソースコード庫" class="headerlink" title="ソースコード庫"></a>ソースコード庫</h2><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>データ構造-二分木</title>
    <url>/2023/01/19/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E4%BA%8C%E5%88%86%E6%9C%A8/</url>
    <content><![CDATA[<p><img src="/images/SSS/SSS06001.png" alt="概念"><br><strong>本文章については</strong>、Cプログラミングで二分木を実現し、二分木における概念などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>二分木の実現<ul>
<li>動的ようにノードを生成</li>
<li>走査（トラバース）<ul>
<li>行きがけ順探索</li>
<li>通りがけ順探索</li>
<li>帰りがけ順探索</li>
<li>幅優先探索</li>
</ul>
</li>
<li>ノード数</li>
<li>葉ノードの数</li>
<li>第 k 層のノード数</li>
<li>値が x のノードを見つける</li>
<li>木の深さを見つける</li>
<li>完全二分木を判断する</li>
<li>二分木の破壊</li>
</ul>
</li>
</ul>
<br>

<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="概念と構造"></a>概念と構造</h1><p><img src="/images/SSS/SSS06001.png" alt="概念"><br>二分木とは、葉以外のすべての節が、２つ以下の子を持つような木構造のことである。もし、必ず２つの子を持つようならば、全二分木と呼ばれる。さらに、どの葉も同じ深さにある場合は、完全二分木と呼ばれる。</p>
<ul>
<li>二分木の構造・ノードの本体<br><img src="/images/SSS/SSS06002.png" alt="概念"></li>
<li>葉ノードにある二つのポインタは必ず <strong>NULL</strong>である。</li>
</ul>
<br>


<h1 id="二分木の実現"><a href="#二分木の実現" class="headerlink" title="二分木の実現"></a>二分木の実現</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//　二分木の構造</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	BTDataType _data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* _<span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* _<span class="title">right</span>;</span></span><br><span class="line">&#125;BTNode;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="動的ようにノードを生成"><a href="#動的ようにノードを生成" class="headerlink" title="動的ようにノードを生成"></a>動的ようにノードを生成</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BTNode* <span class="title function_">BuyNode</span><span class="params">(BTDataType x)</span> <span class="comment">// 新しいノードを作成</span></span><br><span class="line">&#123;</span><br><span class="line">	BTNode* node = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">	assert(node);</span><br><span class="line"></span><br><span class="line">	node-&gt;_data = x;</span><br><span class="line">	node-&gt;_left = node-&gt;_right = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="走査（トラバース）"><a href="#走査（トラバース）" class="headerlink" title="走査（トラバース）"></a>走査（トラバース）</h2><p>二分木に含まれるすべての節を調べたいとする。このような処理を、走査（トラバース）と呼ぶ。ここで重要な点は、「すべてをもらさず」「同じものを重複せず」に調べつくすことである。</p>
<p>二分木に対する走査の方法には、大きく分けると、<strong>深さ優先探索と幅優先探索</strong>の２つがある。前者はさらに、<strong>行きがけ順探索、通りがけ順探索、帰りがけ順探索</strong>に分類できる。これらは、調べる節の順序が異なる。</p>
<p>深さ優先探索では、根から始めて、葉に行き着くまで子をたどっていく。葉まで行き着いたら、その親に戻り、先ほど辿った側ではないもう一方の子を調べに行き、やはり葉までたどる。これを繰り返せば、いずれすべての節を調べられる。</p>
<p>行きがけ順探索、通りがけ順探索、帰りがけ順探索の違いは、根とその２つの子をどんな順序で調べることである。</p>
<p><img src="/images/SSS/SSS06006.png" alt="概念"><br><br></p>
<h3 id="行きがけ順探索"><a href="#行きがけ順探索" class="headerlink" title="行きがけ順探索"></a>行きがけ順探索</h3><p>行きがけ順探索では、根→左の部分木→右の部分木の順で調べる。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrevOrder</span><span class="params">(BTNode* root)</span>       </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;# &quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;_data);</span><br><span class="line">	PrevOrder(root-&gt;_left);</span><br><span class="line">	PrevOrder(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="通りがけ順探索"><a href="#通りがけ順探索" class="headerlink" title="通りがけ順探索"></a>通りがけ順探索</h3><p>通りがけ順探索では、左の部分木→根→右の部分木の順で調べる。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BTNode* root)</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;# &quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	InOrder(root-&gt;_left);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;_data);</span><br><span class="line">	InOrder(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="帰りがけ順探索"><a href="#帰りがけ順探索" class="headerlink" title="帰りがけ順探索"></a>帰りがけ順探索</h3><p>帰りがけ順探索では、左の部分木→右の部分木→根の順で調べる。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BTNode* root)</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;# &quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	PostOrder(root-&gt;_left);</span><br><span class="line">	PostOrder(root-&gt;_right);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="幅優先探索"><a href="#幅優先探索" class="headerlink" title="幅優先探索"></a>幅優先探索</h3><p><img src="/images/SSS/SSS06004.png" alt="概念"><br><strong>幅優先探索</strong>は、まず根を調べ、次に１つ深い階層の左部分木、右部分木を調べる。１つの階層の節をすべて網羅してから、次の階層へ降りることを繰り返す。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 幅優先探索</span></span><br><span class="line"><span class="comment">// キューを使用して、ルート ノードをキューに入れる。キューが空でない場合は、</span></span><br><span class="line"><span class="comment">// ルートノードをデキューし、左右のサブツリーのルート ノードをキューに追加する。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BTNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line">	Queue q;</span><br><span class="line">	QueueInit(&amp;q);</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">	&#123;</span><br><span class="line">		QueuePush(&amp;q, root);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!QueueEmpty(&amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		BTNode* front = QueueFront(&amp;q);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, front-&gt;_data);</span><br><span class="line">		QueuePop(&amp;q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (front-&gt;_left)</span><br><span class="line">		&#123;</span><br><span class="line">			QueuePush(&amp;q, front-&gt;_left);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (front-&gt;_right)</span><br><span class="line">		&#123;</span><br><span class="line">			QueuePush(&amp;q, front-&gt;_right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	QueueDestroy(&amp;q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ノード数"><a href="#ノード数" class="headerlink" title="ノード数"></a>ノード数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TreeSize</span><span class="params">(BTNode* root)</span> <span class="comment">// ノード数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> root == <span class="literal">NULL</span> ? <span class="number">0</span> :</span><br><span class="line">		TreeSize(root-&gt;_left) + TreeSize(root-&gt;_right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="葉ノードの数"><a href="#葉ノードの数" class="headerlink" title="葉ノードの数"></a>葉ノードの数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TreeLeafSize</span><span class="params">(BTNode* root)</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>) </span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;_left == <span class="literal">NULL</span> &amp;&amp; root-&gt;_right == <span class="literal">NULL</span>) <span class="comment">// 葉ノード</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 空でも葉でもない場合は、左部分木の葉ノード + 右部分木葉ノードを返す</span></span><br><span class="line">	<span class="keyword">return</span> TreeLeafSize(root-&gt;_left) + TreeLeafSize(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="第-k-層のノード数"><a href="#第-k-層のノード数" class="headerlink" title="第 k 層のノード数"></a>第 k 層のノード数</h2><p><img src="/images/SSS/SSS06008.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TreeKLevel</span><span class="params">(BTNode* root, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(k &gt;= <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TreeKLevel(root-&gt;_left, k - <span class="number">1</span>)</span><br><span class="line">		+ TreeKLevel(root-&gt;_right, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="値が-x-のノードを見つける"><a href="#値が-x-のノードを見つける" class="headerlink" title="値が x のノードを見つける"></a>値が x のノードを見つける</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BTNode* <span class="title function_">TreeFind</span><span class="params">(BTNode* root, BTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;_data == x)</span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">	BTNode* ret1 = TreeFind(root-&gt;_left, x);</span><br><span class="line">	<span class="keyword">if</span> (ret1)</span><br><span class="line">		<span class="keyword">return</span> ret1;</span><br><span class="line"></span><br><span class="line">	BTNode* ret2 = TreeFind(root-&gt;_right, x);</span><br><span class="line">	<span class="keyword">if</span> (ret2)</span><br><span class="line">		<span class="keyword">return</span> ret2;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="木の高さを見つける"><a href="#木の高さを見つける" class="headerlink" title="木の高さを見つける"></a>木の高さを見つける</h2><p><img src="/images/SSS/SSS06007.png" alt="概念"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TreeDepth</span><span class="params">(BTNode* root)</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> leftDepth = TreeDepth(root-&gt;_left);</span><br><span class="line">	<span class="type">int</span> rightDepth = TreeDepth(root-&gt;_right);</span><br><span class="line">	<span class="keyword">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class="number">1</span> : rightDepth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="完全二分木を判断する"><a href="#完全二分木を判断する" class="headerlink" title="完全二分木を判断する"></a>完全二分木を判断する</h2><ul>
<li>幅優先探索のやり方を参考してください。(Queueを使用するので)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TreeComplete</span><span class="params">(BTNode* root)</span> </span><br><span class="line">&#123;</span><br><span class="line">	Queue q;</span><br><span class="line">	QueueInit(&amp;q);</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">	&#123;</span><br><span class="line">		QueuePush(&amp;q, root);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!QueueEmpty(&amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		BTNode* front = QueueFront(&amp;q);</span><br><span class="line">		QueuePop(&amp;q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (front)</span><br><span class="line">		&#123;</span><br><span class="line">			QueuePush(&amp;q, front-&gt;_left);</span><br><span class="line">			QueuePush(&amp;q, front-&gt;_right);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 空きスペースに遭遇した後、シーケンス トラバーサルから飛び出す</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 裏が全て空なら完全二分木</span></span><br><span class="line">	<span class="comment">// 2. 空の後に非空がある場合、完全な二分木ではありません</span></span><br><span class="line">	<span class="keyword">while</span> (!QueueEmpty(&amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		BTNode* front = QueueFront(&amp;q);  <span class="comment">// 完全二分木の場合、front は常に NULL である</span></span><br><span class="line">		QueuePop(&amp;q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (front)</span><br><span class="line">		&#123;</span><br><span class="line">			QueueDestroy(&amp;q);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	QueueDestroy(&amp;q);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="二分木の破壊"><a href="#二分木の破壊" class="headerlink" title="二分木の破壊"></a>二分木の破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TreeDestory</span><span class="params">(BTNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	TreeDestory(root-&gt;_left);</span><br><span class="line">	TreeDestory(root-&gt;_right);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p:%d\n&quot;</span>, root, root-&gt;_data);</span><br><span class="line">	<span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>




<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/BinaryTree">https://github.com/soukenki/Test_for_C/tree/master/BinaryTree</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
  <entry>
    <title>データ構造-可変長配列</title>
    <url>/2022/12/09/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E5%8F%AF%E5%A4%89%E9%95%B7%E9%85%8D%E5%88%97/</url>
    <content><![CDATA[<p><img src="/images/SSS/SSS01001.jpg" alt="概念"></p>
<p><strong>本文章については</strong>、Cプログラミングで可変長配列を実現し、可変長配列における概念などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>可変長配列の実現<ul>
<li>初期化</li>
<li>尾にデータを挿入</li>
<li>ヘッドにデータを挿入</li>
<li>尾にデータを削除</li>
<li>ヘッドにデータを削除</li>
<li>任意の位置にデータを挿入</li>
<li>任意の位置にデータを削除</li>
<li>データの検索</li>
<li>データの修正</li>
<li>データの破壊</li>
</ul>
</li>
<li>コードの要約<ul>
<li>Test.c　</li>
<li>SeqList.c</li>
<li>SeqList.h</li>
</ul>
</li>
</ul>
<br>

<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="概念と構造"></a>概念と構造</h1><p>配列は、データ要素が連続した物理アドレスを持つ記憶ユニットに順次格納される線形構造であり、一般に配列に格納される。 配列の中にデータを追加、削除、検索、変更など実現できる。</p>
<p>配列は、一般に次のように分類ができる：</p>
<ol>
<li>固定サイズ配列: コンパイル時に長さが決定される配列データ構造である。</li>
<li>動的配列（可変長配列）: コンパイル時ではなく実行時に長さが決定される自動記憶期間の配列データ構造である。</li>
</ol>
<p>　　</p>
<p><img src="/images/SSS/SSS01001.jpg" alt="概念"></p>
<p>普通の配列は固定長であるため、配列が小さすぎて十分ではない、配列が大きすぎてスペースを浪費しない、様々なの問題がある。そのため、通常は可変長配列を使用する。</p>
<p>次に、可変長配列の実装について説明していきたいと思うよ。<br><br></p>
<h1 id="可変長配列の実現"><a href="#可変長配列の実現" class="headerlink" title="可変長配列の実現"></a>可変長配列の実現</h1><p>まず、プロジェクトを作成し、ヘッダーファイル「SeqList.h」を定義して、関連する関数などを宣言する。</p>
<p>次に、ソースファイル「SeqList.c」を定義して関数の定義を実装し、配列をテストするために、「Test.c」を定義する。</p>
<figure class="highlight c"><figcaption><span>SeqList.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//　動的配列の構造</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDateType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	SLDateType* _a;   <span class="comment">//　動的配列へのポインター</span></span><br><span class="line">	<span class="type">size_t</span> _size;      <span class="comment">// データサイズ</span></span><br><span class="line">	<span class="type">size_t</span> _capacity;   <span class="comment">// 容量サイズ</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure>


<br>

<h2 id="初期化"><a href="#初期化" class="headerlink" title="初期化"></a>初期化</h2><p>データを操作する前にデータを初期化する必要があるので、まずデータを初期化する関数「SeqListInit」を定義する。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">(SeqList* ps)</span> <span class="comment">// 初期化</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	ps-&gt;_a = <span class="literal">NULL</span>;　　</span><br><span class="line">	ps-&gt;_size = <span class="number">0</span>;  </span><br><span class="line">	ps-&gt;_capacity = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="尾にデータを挿入"><a href="#尾にデータを挿入" class="headerlink" title="尾にデータを挿入"></a>尾にデータを挿入</h2><p>初期化後、シーケンス テーブルの最初の関数を実装します。配列の最後にデータを挿入します。</p>
<p>ただし、データを挿入する前に、配列にデータがあるかどうか、またはデータが多すぎて拡張する必要があるかどうかを判断する必要があります。<br>他の機能についても、実装前にこのように判断する必要がありますが、ここでは、この機能は機能によって実現されています。</p>
<figure class="highlight c"><figcaption><span>拡張の必要を判断</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span>  <span class="comment">//　容量サイズを検査</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_size == ps-&gt;_capacity)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> newCapacity = ps-&gt;_capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;_capacity * <span class="number">2</span>; <span class="comment">//　はじめに4を設定，以降毎回*2</span></span><br><span class="line">		SLDateType* tmp = (SLDateType*)<span class="built_in">realloc</span>(ps-&gt;_a, newCapacity * <span class="keyword">sizeof</span>(SLDateType));</span><br><span class="line">		<span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;realloc : fail\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//　更新する</span></span><br><span class="line">		ps-&gt;_a = tmp;</span><br><span class="line">		tmp = <span class="literal">NULL</span>;</span><br><span class="line">		ps-&gt;_capacity = newCapacity;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/SSS/SSS01002.png"></p>
<figure class="highlight c"><figcaption><span>尾に挿入</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SeqList* ps, SLDateType x)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps); </span><br><span class="line">	SeqListCheckCapacity(ps);<span class="comment">//　容量サイズを検査</span></span><br><span class="line"></span><br><span class="line">	ps-&gt;a[ps-&gt;size] = x;</span><br><span class="line">	ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<br>

<h2 id="ヘッドにデータを挿入"><a href="#ヘッドにデータを挿入" class="headerlink" title="ヘッドにデータを挿入"></a>ヘッドにデータを挿入</h2><p><img src="/images/SSS/SSS01003.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SeqList* ps, SLDateType x)</span>  </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	SeqListCheckCapacity(ps);<span class="comment">//　容量サイズを検査</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_size &gt; <span class="number">0</span>) <span class="comment">//　ヘッドのデータを移動</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> end = ps-&gt;_size - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (end &gt;= <span class="number">0</span>)    <span class="comment">//　尾+1のところ</span></span><br><span class="line">		&#123;</span><br><span class="line">			ps-&gt;_a[end + <span class="number">1</span>] = ps-&gt;_a[end];</span><br><span class="line">			--end;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ps-&gt;_sizeof++;</span><br><span class="line">	ps-&gt;_a[<span class="number">0</span>]=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>




<h2 id="尾にデータを削除"><a href="#尾にデータを削除" class="headerlink" title="尾にデータを削除"></a>尾にデータを削除</h2><p><img src="/images/SSS/SSS01005.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SeqList* ps)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(ps-&gt;_size &gt; <span class="number">0</span>);</span><br><span class="line">	ps-&gt;_size--; <span class="comment">//　データ数を直接 1 減らす</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h2 id="ヘッドにデータを削除"><a href="#ヘッドにデータを削除" class="headerlink" title="ヘッドにデータを削除"></a>ヘッドにデータを削除</h2><p><img src="/images/SSS/SSS01004.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SeqList* ps)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps != <span class="literal">NULL</span>);</span><br><span class="line">	assert(ps-&gt;size &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> begin = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (begin &lt; ps-&gt;size)</span><br><span class="line">	&#123;</span><br><span class="line">		ps-&gt;a[begin - <span class="number">1</span>] = ps-&gt;a[begin];</span><br><span class="line">		++begin;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h2 id="任意の位置にデータを挿入"><a href="#任意の位置にデータを挿入" class="headerlink" title="任意の位置にデータを挿入"></a>任意の位置にデータを挿入</h2><p><img src="/images/SSS/SSS01007.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 位置 pos に データを挿入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInsert</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos, SLDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	SeqListCheckCapacity(ps);<span class="comment">//　容量サイズを検査</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> end = ps-&gt;_size - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (end &gt;= pos &amp;&amp; end &gt;= <span class="number">0</span>)    <span class="comment">//　尾+1のところ</span></span><br><span class="line">	&#123;</span><br><span class="line">		ps-&gt;_a[end + <span class="number">1</span>] = ps-&gt;_a[end];</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ps-&gt;_a[pos] = x;</span><br><span class="line">	ps-&gt;_size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>



<h2 id="任意の位置にデータを削除"><a href="#任意の位置にデータを削除" class="headerlink" title="任意の位置にデータを削除"></a>任意の位置にデータを削除</h2><p><img src="/images/SSS/SSS01006.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 位置 pos に データを削除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListErase</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pos == ps-&gt;_size - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ps-&gt;_size--;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> begin = pos + <span class="number">1</span>;  <span class="comment">// pos=0 の場合、範囲外のアクセスを防止する</span></span><br><span class="line">		<span class="keyword">while</span> (begin &lt; ps-&gt;_size)</span><br><span class="line">		&#123;</span><br><span class="line">			ps-&gt;_a[begin - <span class="number">1</span>] = ps-&gt;_a[begin];</span><br><span class="line">			begin++;</span><br><span class="line">		&#125;</span><br><span class="line">		ps-&gt;_size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h2 id="データの検索"><a href="#データの検索" class="headerlink" title="データの検索"></a>データの検索</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">SeqListFind</span><span class="params">(SeqList* ps, SLDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;_size; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ps-&gt;_a[i] == x)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データの修正"><a href="#データの修正" class="headerlink" title="データの修正"></a>データの修正</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// パラメータ pos を最初に検索する必要がある</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListModify</span><span class="params">(SeqList* ps, <span class="type">int</span> pos, SLDateType x)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	ps-&gt;_a[pos] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データの破壊"><a href="#データの破壊" class="headerlink" title="データの破壊"></a>データの破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SeqListDestroy</span><span class="params">(SeqList* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(ps-&gt;_a);</span><br><span class="line">		ps-&gt;_a = <span class="literal">NULL</span>;</span><br><span class="line">		ps-&gt;_size = <span class="number">0</span>;</span><br><span class="line">		ps-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;データの破壊が成功した\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="コードの要約"><a href="#コードの要約" class="headerlink" title="コードの要約"></a>コードの要約</h1><br>

<h2 id="Test-c"><a href="#Test-c" class="headerlink" title="Test.c"></a>Test.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> 	<span class="title function_">testSeqList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//...テストする</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	testSeqList();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="SeqList-c"><a href="#SeqList-c" class="headerlink" title="SeqList.c"></a>SeqList.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">(SeqList* ps)</span> <span class="comment">// 初期化</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	ps-&gt;_a = <span class="literal">NULL</span>;</span><br><span class="line">	ps-&gt;_size = <span class="number">0</span>;</span><br><span class="line">	ps-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span>  <span class="comment">// 容量サイズを検査</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_size == ps-&gt;_capacity)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> newCapacity = ps-&gt;_capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;_capacity * <span class="number">2</span>; <span class="comment">//　はじめに4を設定，以降毎回*2</span></span><br><span class="line">		SLDateType* tmp = (SLDateType*)<span class="built_in">realloc</span>(ps-&gt;_a, newCapacity * <span class="keyword">sizeof</span>(SLDateType));</span><br><span class="line">		<span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;realloc : fail\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//　更新する</span></span><br><span class="line">		ps-&gt;_a = tmp;</span><br><span class="line">		tmp = <span class="literal">NULL</span>;</span><br><span class="line">		ps-&gt;_capacity = newCapacity;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListDestroy</span><span class="params">(SeqList* ps)</span> <span class="comment">// データの破壊</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">if</span> (ps-&gt;_a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(ps-&gt;_a);</span><br><span class="line">		ps-&gt;_a = <span class="literal">NULL</span>;</span><br><span class="line">		ps-&gt;_size = <span class="number">0</span>;</span><br><span class="line">		ps-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;データの破壊が成功した\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPrint</span><span class="params">(SeqList* ps)</span> <span class="comment">// 出力関数</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;_size; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;_a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SeqList* ps, SLDateType x)</span>  <span class="comment">// 尾にデータを削除</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	SeqListInsert(ps, ps-&gt;_size, x); <span class="comment">// 関数再利用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SeqList* ps, SLDateType x)</span>  <span class="comment">// ヘッドにデータを挿入</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	SeqListInsert(ps, <span class="number">0</span>, x);　<span class="comment">// 関数再利用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//SeqListCheckCapacity(ps);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//if (ps-&gt;_size &gt; 0)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	int end = ps-&gt;_size - 1;</span></span><br><span class="line">	<span class="comment">//	while (end &gt;= 0)    </span></span><br><span class="line">	<span class="comment">//	&#123;</span></span><br><span class="line">	<span class="comment">//		ps-&gt;_a[end + 1] = ps-&gt;_a[end];</span></span><br><span class="line">	<span class="comment">//		--end;</span></span><br><span class="line">	<span class="comment">//	&#125;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//ps-&gt;_sizeof++;</span></span><br><span class="line">	<span class="comment">//ps-&gt;_a[0]=x;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopFront</span><span class="params">(SeqList* ps)</span>  <span class="comment">//ヘッドにデータを削除</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(ps-&gt;_size &gt; <span class="number">0</span>);</span><br><span class="line">	SeqListErase(ps, <span class="number">0</span>); <span class="comment">// 関数再利用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SeqList* ps)</span>  <span class="comment">// 尾にデータを削除</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(ps-&gt;_size &gt; <span class="number">0</span>);</span><br><span class="line">	ps-&gt;_size--; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意の位置にデータを挿入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInsert</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos, SLDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	SeqListCheckCapacity(ps);<span class="comment">// 容量サイズを検査</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> end = ps-&gt;_size - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (end &gt;= pos &amp;&amp; end &gt;= <span class="number">0</span>)   <span class="comment">//　尾+1のところ</span></span><br><span class="line">	&#123;</span><br><span class="line">		ps-&gt;_a[end + <span class="number">1</span>] = ps-&gt;_a[end];</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ps-&gt;_a[pos] = x;</span><br><span class="line">	ps-&gt;_size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任意の位置にデータを削除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListErase</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pos == ps-&gt;_size - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ps-&gt;_size--;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> begin = pos + <span class="number">1</span>;  <span class="comment">// pos=0 の場合、範囲外のアクセスを防止する</span></span><br><span class="line">		<span class="keyword">while</span> (begin &lt; ps-&gt;_size)</span><br><span class="line">		&#123;</span><br><span class="line">			ps-&gt;_a[begin - <span class="number">1</span>] = ps-&gt;_a[begin];</span><br><span class="line">			begin++;</span><br><span class="line">		&#125;</span><br><span class="line">		ps-&gt;_size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// データの検索</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SeqListFind</span><span class="params">(SeqList* ps, SLDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;_size; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ps-&gt;_a[i] == x)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// データの検索</span></span><br><span class="line"><span class="comment">// パラメータ pos を最初に検索する必要がある</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListModify</span><span class="params">(SeqList* ps, <span class="type">int</span> pos, SLDateType x)</span> </span><br><span class="line">&#123;</span><br><span class="line">	assert(ps);</span><br><span class="line">	assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;_size);</span><br><span class="line"></span><br><span class="line">	ps-&gt;_a[pos] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="SeqList-h"><a href="#SeqList-h" class="headerlink" title="SeqList.h"></a>SeqList.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//動的配列の構造</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDateType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	SLDateType* _a;   <span class="comment">// 動的配列へのポインター</span></span><br><span class="line">	<span class="type">size_t</span> _size;      <span class="comment">// データサイズ</span></span><br><span class="line">	<span class="type">size_t</span> _capacity;  <span class="comment">// 容量サイズ</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配列の中にデータを追加、削除、検索、変更など</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">(SeqList* ps)</span>; <span class="comment">// 初期化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span>; <span class="comment">// 容量サイズを検査</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListDestroy</span><span class="params">(SeqList* ps)</span>; <span class="comment">// データの破壊</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPrint</span><span class="params">(SeqList* ps)</span>; <span class="comment">// 出力関数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SeqList* ps, SLDateType x)</span>;  <span class="comment">// 尾に挿入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SeqList* ps, SLDateType x)</span>;  <span class="comment">// ヘッドにデータを挿入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopFront</span><span class="params">(SeqList* ps)</span>;   <span class="comment">// ヘッドにデータを削除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SeqList* ps)</span>;  <span class="comment">// 尾にデータを削除</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// データの検索</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SeqListFind</span><span class="params">(SeqList* ps, SLDateType x)</span>;</span><br><span class="line"><span class="comment">// 任意の位置にデータを挿入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInsert</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos, SLDateType x)</span>;</span><br><span class="line"><span class="comment">// 任意の位置にデータを削除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListErase</span><span class="params">(SeqList* ps, <span class="type">size_t</span> pos)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListModify</span><span class="params">(SeqList* ps, <span class="type">int</span> pos, SLDateType x)</span>; <span class="comment">// パラメータ pos を最初に検索する必要がある</span></span><br></pre></td></tr></table></figure>
<br>


<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/SeqList">https://github.com/soukenki/Test_for_C/tree/master/SeqList</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
  <entry>
    <title>データ構造-単方向リスト</title>
    <url>/2022/12/10/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0-%E5%8D%98%E6%96%B9%E5%90%91%E3%83%AA%E3%82%B9%E3%83%88/</url>
    <content><![CDATA[<p><img src="/images/SSS/SSS02000.png"><br><strong>本文章については</strong>、Cプログラミングで単方向リストを実現し、単方向リストにおける概念や運用などを明らかに述べることである。</p>
<span id="more"></span>

<p><strong>目次 &gt;</strong></p>
<ul>
<li>概念と構造</li>
<li>単方向リストの実現<ul>
<li>動的ように要素を生成</li>
<li>出力関数（テスト用）</li>
<li>尾にデータを挿入</li>
<li>ヘッドにデータを挿入</li>
<li>尾にデータを削除</li>
<li>ヘッドにデータを削除</li>
<li>pos位置の後ろにデータを挿入</li>
<li>pos位置の後ろにデータを削除</li>
<li>データの検索</li>
<li>単方向リストの破壊</li>
</ul>
</li>
</ul>
<br>

<h1 id="概念と構造"><a href="#概念と構造" class="headerlink" title="- 概念と構造"></a>- 概念と構造</h1><p>リストとは、配列のようなもので、なかに複数のデータを入れることができますが、リストと配列の違いところもあります。リスト構造のうち、特に要素一つ一つがリンクによって接続されているものを、 「ノード」 と呼びます。</p>
<p><img src="/images/SSS/SSS02001.png"></p>
<p>　<br>配列はメモリ内の空間は連続していますが、リストはメモリ内の空間は連続していなくてもかまいません。配列は、ノードにデータがしかありません。一方、リストは、ノードにデータを格納するほかに次のノードのポインタが格納されています。リストは、自分のノード内のポインタを介して次のノードの位置を探します。</p>
<ul>
<li>各ノードは 「データ部」 と 「ポインタ部」 の２つから構成されます。</li>
<li>「ポインタ部」 を辿ることによって次のノードの 「データ部」 にアクセスできます。</li>
</ul>
<p>　　</p>
<figure class="highlight c"><figcaption><span>ノード構造体</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	SLTDateType data;  <span class="comment">// データ</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span>　<span class="comment">// 次のノード </span></span><br><span class="line">&#125;SListNode;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="単方向リストの実現"><a href="#単方向リストの実現" class="headerlink" title="単方向リストの実現"></a>単方向リストの実現</h1><br>

<h2 id="動的ように要素を生成"><a href="#動的ように要素を生成" class="headerlink" title="動的ように要素を生成"></a>動的ように要素を生成</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SListNode* <span class="title function_">BuySListNode</span><span class="params">(SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	SListNode* ret = (SListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SListNode));</span><br><span class="line">	assert(ret);</span><br><span class="line">	ret-&gt;data = x;</span><br><span class="line">	ret-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="出力関数（テスト用）"><a href="#出力関数（テスト用）" class="headerlink" title="出力関数（テスト用）"></a>出力関数（テスト用）</h2><figure class="highlight c"><figcaption><span>出力関数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListPrint</span><span class="params">(SListNode* plist)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(plist);</span><br><span class="line">	SListNode* tail = plist;</span><br><span class="line">	<span class="keyword">while</span> (tail)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>, tail-&gt;data);</span><br><span class="line">		tail = tail-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="尾にデータを挿入"><a href="#尾にデータを挿入" class="headerlink" title="尾にデータを挿入"></a>尾にデータを挿入</h2><p><img src="/images/SSS/SSS02002.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListPushBack</span><span class="params">(SListNode** pplist, SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(*pplist);</span><br><span class="line">	SListNode* p = BuySListNode(x);</span><br><span class="line">	SListNode* tail = *pplist;</span><br><span class="line">	<span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tail = tail-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	tail-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="ヘッドにデータを挿入"><a href="#ヘッドにデータを挿入" class="headerlink" title="ヘッドにデータを挿入"></a>ヘッドにデータを挿入</h2><p><img src="/images/SSS/SSS02003.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListPushFront</span><span class="params">(SListNode** pplist, SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(*pplist);</span><br><span class="line">	SListNode* p = BuySListNode(x);</span><br><span class="line">	p-&gt;next = *pplist;</span><br><span class="line">	*pplist = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>


<h2 id="尾にデータを削除"><a href="#尾にデータを削除" class="headerlink" title="尾にデータを削除"></a>尾にデータを削除</h2><p><img src="/images/SSS/SSS02004.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListPopBack</span><span class="params">(SListNode** pplist)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(*pplist);</span><br><span class="line">	<span class="keyword">if</span> ((*pplist)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(*pplist);</span><br><span class="line">		*pplist = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SListNode* tail = *pplist;</span><br><span class="line">	<span class="keyword">while</span> (tail-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tail = tail-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(tail-&gt;next);</span><br><span class="line">	tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="ヘッドにデータを削除"><a href="#ヘッドにデータを削除" class="headerlink" title="ヘッドにデータを削除"></a>ヘッドにデータを削除</h2><p><img src="/images/SSS/SSS02005.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListPopFront</span><span class="params">(SListNode** pplist)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(*pplist);</span><br><span class="line">	<span class="keyword">if</span> ((*pplist)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(*pplist);</span><br><span class="line">		*pplist = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SListNode* pre = *pplist;</span><br><span class="line">	*pplist = (*pplist)-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(pre);</span><br><span class="line">	pre = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="pos位置の後ろにデータを挿入"><a href="#pos位置の後ろにデータを挿入" class="headerlink" title="pos位置の後ろにデータを挿入"></a>pos位置の後ろにデータを挿入</h2><p><img src="/images/SSS/SSS02006.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListInsertAfter</span><span class="params">(SListNode* pos, SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pos);</span><br><span class="line">	</span><br><span class="line">	SListNode* newnode = BuySListNode(x); <span class="comment">// xの値で新しいノードを動的に申請する</span></span><br><span class="line">	SListNode* next = pos-&gt;next;</span><br><span class="line"></span><br><span class="line">	pos-&gt;next = newnode;</span><br><span class="line">	newnode-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="pos位置の後ろにデータを削除"><a href="#pos位置の後ろにデータを削除" class="headerlink" title="pos位置の後ろにデータを削除"></a>pos位置の後ろにデータを削除</h2><p><img src="/images/SSS/SSS02007.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListEraseAfter</span><span class="params">(SListNode* pos)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(pos);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pos-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;posの後ろにデータがない\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		SListNode* next = pos-&gt;next-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(pos-&gt;next);</span><br><span class="line">		pos-&gt;next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="データの検索"><a href="#データの検索" class="headerlink" title="データの検索"></a>データの検索</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SListNode* <span class="title function_">SListFind</span><span class="params">(SListNode* plist, SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(plist);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (plist != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (plist-&gt;data == x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> plist;</span><br><span class="line">		&#125;</span><br><span class="line">		plist = plist-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="単方向リストの破壊"><a href="#単方向リストの破壊" class="headerlink" title="単方向リストの破壊"></a>単方向リストの破壊</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SListDestory</span><span class="params">(SListNode* plist)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(plist);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (plist) <span class="comment">// plistがNULLの場合は終了</span></span><br><span class="line">	&#123;</span><br><span class="line">		SListNode* next = plist-&gt;next; <span class="comment">// 全ノードをループ解放</span></span><br><span class="line">		<span class="built_in">free</span>(plist);</span><br><span class="line">		plist = next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;データの破壊が成功した\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>



<p>次の投稿は、単方向リストに基づいて、「双方向循環リスト番兵ノードつけ」というデータ構造である。興味があれば、是非マイgithubをフォローしてくださいね。(笑)</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki/Test_for_C/tree/master/test_list">https://github.com/soukenki/Test_for_C/tree/master/test_list</a></li>
</ul>
]]></content>
      <categories>
        <category>データ構造とアルゴリズム</category>
      </categories>
      <tags>
        <tag>C言語</tag>
        <tag>データ構造とアルゴリズム</tag>
      </tags>
  </entry>
</search>
