{"meta":{"title":"IT笔记屋","subtitle":"","description":"本博客是作者对计算机相关专业知识的理解，以及其运用时作出的学习和总结。","author":"Skk","url":"https://soukenki.github.io/zh-CN","root":"/zh-CN/"},"pages":[{"title":"关于作者","date":"2022-11-22T10:39:30.000Z","updated":"2022-11-22T13:01:36.513Z","comments":true,"path":"about/index.html","permalink":"https://soukenki.github.io/zh-CN/about/index.html","excerpt":"","text":"你好。我叫 Skk。我现在是大学三年级的学生。我正在学习 C&#x2F;C++、Linux 等。 本博客是作者对计算机相关专业知识的理解，以及其运用时作出的学习和总结。 邮箱：&#97;&#49;&#49;&#x30;&#54;&#54;&#55;&#x31;&#x35;&#50;&#56;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;如果您有任何建议或问题，请通过电子邮件、Line 或微信与我联系。 非常感谢您对本站的支持。之后会持续更新~"},{"title":"主页","date":"2022-11-18T16:54:27.000Z","updated":"2022-11-22T13:22:55.226Z","comments":true,"path":"categories/index.html","permalink":"https://soukenki.github.io/zh-CN/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-18T16:57:58.000Z","updated":"2022-11-22T13:22:56.109Z","comments":true,"path":"tags/index.html","permalink":"https://soukenki.github.io/zh-CN/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C语言的初次见面-下","slug":"C语言的初次见面-下","date":"2022-11-23T12:11:53.000Z","updated":"2022-11-23T16:36:50.288Z","comments":true,"path":"2022/11/23/C语言的初次见面-下/","link":"","permalink":"https://soukenki.github.io/zh-CN/2022/11/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2-%E4%B8%8B/","excerpt":"关于本文章，是我第一次接触C的时候，大概了解到的一个框架。这里是文章的下半部分，后面我会更新发布专门针对各种各样关于语法细节的文章。感兴趣的话，请持续关注我的更新~目录 &gt; 函数 数组 操作符 算术操作符： + - * &#x2F; % 移位操作符: &gt;&gt; &lt;&lt; 位操作符：&amp;按位与、|按位或、^按位异或 赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D; 单目操作符: ! + - sizeof ~ ++ – &amp; * (类型) 关系操作符: &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; &#x3D;&#x3D; 逻辑操作符 条件操作符（三目操作符） 逗号表达式 下标引用、函数调用和结构成员 常见关键字 指针 结构体","text":"关于本文章，是我第一次接触C的时候，大概了解到的一个框架。这里是文章的下半部分，后面我会更新发布专门针对各种各样关于语法细节的文章。感兴趣的话，请持续关注我的更新~目录 &gt; 函数 数组 操作符 算术操作符： + - * &#x2F; % 移位操作符: &gt;&gt; &lt;&lt; 位操作符：&amp;按位与、|按位或、^按位异或 赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D; 单目操作符: ! + - sizeof ~ ++ – &amp; * (类型) 关系操作符: &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; &#x3D;&#x3D; 逻辑操作符 条件操作符（三目操作符） 逗号表达式 下标引用、函数调用和结构成员 常见关键字 指针 结构体 函数函数例：12345678910111213141516171819#include&lt;stdio.h&gt; //printf、scanf这些是库函数，C语言库自带的int add(int x, int y) //int add 这种是自定义函数，自己设计的&#123; int z = (x + y); //设计的计算公式（自己设计，加减乘除都行） return z; //这里计算结果会返回到下面的sum里&#125;int main()&#123; int num1 = 100; int num2 = 200; int sum = 0; int a = 5; int b = 6; sum = add(num1, num2);//得出结果300 printf(&quot;%d\\n&quot;, sum); sum = add(a, b); printf(&quot;%d\\n&quot;, sum);//得出结果11 return 0;&#125; 数组123456789101112131415161718#include&lt;stdio.h&gt;int main()&#123; //定义一个存放10个整型数字的数组 int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;//下标从0开始，比如[n]的下标=n-1 //0~9 int i = 0; while (i &lt; 10) &#123; printf(&quot;%d &quot;, arr[i]); i++; //用循环语句再加上++，从而打出1~10的全部数值 &#125; printf(&quot;%d\\n&quot;, arr[4]);//用下标的形式访问元素 arr[下标]； char ch[20];//存放字符 float arr2[5];//存放浮点数字 return 0;&#125; 操作符 算术操作符： + - * &#x2F; % 移位操作符: &gt;&gt; &lt;&lt; 位操作符：&amp;按位与、|按位或、^按位异或 赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D; 单目操作符: ! + - sizeof ~ ++ – &amp; * (类型) 关系操作符: &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; &#x3D;&#x3D; 逻辑操作符 条件操作符（三目操作符） 逗号表达式 算术操作符： + - * &#x2F; %12345678#include&lt;stdio.h&gt;int main()&#123; // 5/2=2余数为1: 5/2--&gt;2 5%2--&gt;1 int a = 5 % 2;// %用于取模(余数) printf(&quot;%d\\n&quot;, a);//1 return 0;&#125; 移位操作符: &gt;&gt; &lt;&lt;1234567891011121314#include&lt;stdio.h&gt;int main()&#123; //移（2进制）位操作符 // &lt;&lt;左移 &gt;&gt;右移 int a = 1; //整型1占4个字节-32bit位 //00000000000000000000000000000001 int b = a &lt;&lt; 3;//a左移3个bit位等于b //b=00000000000000000000000000001000 //计算公式: 1*2^3 + 0*2^2 + 0*2^1 + 0*2^0 = 8+0+0+0 = 8 printf(&quot;%d\\n&quot;, b);//得出b=8 return 0;&#125; 位操作符：&amp;按位与、|按位或、^按位异或12345678910111213141516171819202122232425#include&lt;stdio.h&gt;int main()&#123; //（2进制）位操作 二进制： ... 1 1 1 1 // &amp; 按位与 ... 1*2^3 1*2^3 1*2^3 1*2^3 // | 按位或 ... 8 4 2 1 // ^ 按位异或 int a = 3; //011--&gt; 1*2^1 + 1*2^0 = 2+1 = 3----2+1----0011 int b = 5; //5-----4+1-----0101 例： 13-----8+4+1----1101 int c = a &amp; b;//得1 // &amp; 011 0+1-0 ，1+1-1 必须两个1才得1 // 101 //得出 001 int c = a | b;//得7 // | 011 0+1-1 ，1+1-1 只要有一个1就得1 // 101 //得出 111 int c = a ^ b;//得6 //异或的计算规律：对应的二进制位相同，则为0; 对应的二进制位相异，则为1。 // ^ 011 // 101 //得出 110 printf(&quot;%d\\n&quot;, c); return 0;&#125; 赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;12345678910111213141516int main()&#123; int a = 10; a = 20;// &#x27;=&#x27; 赋值 &#x27;==&#x27; 判断相等 a = a + 10;//方式1 a += 10; //方式2 方式1和2，完全相等 //例 a = a - 20; a -= 20; a = a &amp; 2; a &amp;= 2; //复合赋值符 //+= -= *= %= &gt;&gt;= &lt;&lt;= &amp;= |= ^= return 0;&#125; 单目操作符: ! + - sizeof ~ ++ – &amp; * (类型) 单目操作符 （一个操作数） 双目操作符 （两个操作数） 三目操作符 (三个操作数) ! 反逻辑操作符 12345678910111213//C语言中表示我们表示真假 // 0-假 非0-真 int a = 10; printf(&quot;%d\\n&quot;, a);//正常逻辑a=10为真 printf(&quot;%d\\n&quot;, !a);//前面加&#x27;！&#x27;逻辑反逻辑，&#x27;!a&#x27;为0，是假。 !的应用场景: if(a) printf(&quot;hehe\\n&quot;); if(!a) printf(&quot;hehe\\n&quot;); //如果&#x27;a&#x27;=&#x27;0&#x27;，则&#x27;!a&#x27;为&#x27;1&#x27;。 + 正值 、 - 负值 123int a = 2;// 2int b = -a;// -2 给a取负int c = +b;// -2 +正号都会省略 sizeof 操作数的类型长度（以字节为单位） 12345678910111213141516 int a = 10; //sizeof 计算的是 变量或类型 所占空间的大小，单位是字节 printf(&quot;%d\\n&quot;, sizeof(a)); //4 几个方式都一样 printf(&quot;%d\\n&quot;, sizeof(int));//4 printf(&quot;%d\\n&quot;, sizeof a); //4 a的()可以省略 //printf(&quot;%d\\n&quot;, sizeof int);//error int的&#x27;()&#x27;不可省略，所以是error——————————————————————————————————————————————————————————————————————————— int arr[10] = &#123; 0 &#125;;//10个整型元素的数组 //10*sizeof(int) = 40 printf(&quot;%d\\n&quot;, sizeof arr);//40 //计算数组的元素个数 // 个数 = 数组总大小 / 每个元素的大小 int sz = 0; sz = sizeof(arr) / sizeof(arr[0]); printf(&quot;sz=%d\\n&quot;, sz);//10 EOF - end of file - 文件结束标志&#x3D; -1 #define EOF -1 练习题12345678910111213141516171819202122#include&lt;stdio.h&gt; int max(int x, int y) //自定义函数&#123; if (x &gt; y) return x; //如果x&gt;y，显示x else return y; //其他显示y&#125;int main()&#123; int a = 10; int b = 20; int c = 0; c = max(a, b); printf(&quot;c=%d\\n&quot;, c);//得20，显示b的值———————————————————————————————————————————————————————————————————— int arr[] = &#123; 1,2,3,4,5,6 &#125;;// 6*4=24 （1个int，4个字节--&gt;6个数，6个int） printf(&quot;%d\\n&quot;, sizeof(arr));//计算数组大小，单位是字节 printf(&quot;%d\\n&quot;, sizeof(arr) / sizeof(arr[0])); //arr的总大小除于（arr[0]）一个元素的大小= 元素个数--&gt;6 return 0;&#125; ~ 对一个数的二进制按位取反 12345678910#include&lt;stdio.h&gt;int main()&#123; int a = 0;//4个字节，32个bit位---&gt;00000000000000000000000000000000(32个) int b = ~a; // ~ 按（二进制）位取反 例：1010 --&gt;0101 （1和0互相改变） b是有符号的整型 //按位取反后变成32个 1，b=32个1 printf(&quot;%d\\n&quot;, b);// -1 因为b是有符号的整型，所以第一位数是符号位，当它是1时变负号（-） //计算机存储负数时，用的是 补码， 但是使用时，打印的是这个数的原码。 return 0;&#125; 原码、反码、补码 负数在内存中存储的时候，存储的是二进制的 补码 原码 -&gt; 反码 -&gt; 补码 的过程： 原码-&gt; 符号位不变，其他位置按位取反 –&gt; 反码 反码-&gt; 加一（+1）–&gt; 补码 反过来就是：补码-1 再 按位取反 &#x3D; 原码 所以 11111111111111111111111111111111 11111111111111111111111111111110 符号位不变 10000000000000000000000000000001 符号位1&#x3D;负号 0000000000000000000000000000001&#x3D;1 所以得出b&#x3D; -1 只要是整数，内存中存储的都是二进制的补码正数–原码，反码，补码 相同负数–&gt;补码原码是：直接按照正负写出的二进制序列 -2 100000000000000000000010 -2的原码反码是：原码的符号位不变，其他位置按位取反 111111111111111111111101 -2的反码补码是：反码+1 111111111111111111111110 -2的补码 ++ -- 前置 或 后置 ++ -- 1234567891011#include&lt;stdio.h&gt;int main()&#123; int a = 10; //int b = a++;//后置++，先使用(b变a)，再++(a再+1) int b = ++a;//前置++，先++（a+1），再使用 //int b = a--;//a=9,b=10 //int b = --a;//a=9,b=9 printf(&quot;a=%d b=%d\\n&quot;, a, b);//后置++：a=11,b=10； 前置++：a=11，b=11。 return 0;&#125; &amp; 取地址 * 间接访问操作符（解引用操作符） （类型） 强制类型转换 ‘（）里面放个类型’ 12345int main()&#123; int a = (int)3.14;//原来3.14是double类型的，（）里面填类型，强制类型转换，让3.14强制变int类型 return 0;&#125; 关系操作符: &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; &#x3D;&#x3D; &gt; 大于 &gt;&#x3D; 大于等于 &lt; 小于 &lt;&#x3D; 小于等于 !&#x3D; 不等于 — 用于测试‘不等于’ &#x3D;&#x3D; 判断相等 — 用于测试‘相等’ — 一个&#x3D;是赋值操作符 逻辑操作符&amp;&amp; 逻辑与|| 逻辑或 1234567891011121314151617#include&lt;stdio.h&gt;int main()&#123; // 假--0 真--非0 // &amp;&amp; - 逻辑与 int a = 3; int b = 5; int c = a &amp;&amp; b;//左边a为真，右边b也为真，所以c也为真（只要a或b其中一个为假（0），那么c也为假（0）） printf(&quot;c=%d\\n&quot;, c);// c为真--&gt;1 c为假--&gt;0 // ||-逻辑或 int e = 0; int f = 2; int g = e || f;//只要e 或 f其中一个为真，则g为真。 printf(&quot;g=%d\\n&quot;, g);//g=1 e和f都为假（0），g才为假 return 0;&#125; 条件操作符（三目操作符）exp1 ? exp2 : exp3 1234567891011121314#include&lt;stdio.h&gt;int main()&#123; int a = 10; //exp1?exp2:exp3; 表达式1为真，结果为表达式2；表达式1为假，则为表达式3。 int b = 20; int max = 0; max = (a &gt; b ? a : b);//a&gt;b为真，max得a；a&gt;b为假，max则得b。 //if (a &gt; b) // max = a; //上面这个三目操作符可以代替if和else来简洁使用 //else // max = b; printf(&quot;max=%d\\n&quot;, max); return 0;&#125; 逗号表达式exp1 , exp2 , exp3 , … expN逗号表达式，从左到右依次计算，整个 表达式的结果 是：最后一个表达式的结果。 例：12345int a = 1;int b = 3;int c = 4;int d = (a = b - 3 , b = a * 2 , c = a - b);// 0 a b c 的值都会被改变printf(&quot;%d\\n&quot;,d);// 0 下标引用、函数调用和结构成员 [] () . -&gt; 12345678910111213141516171819#include&lt;stdio.h&gt;int Add(int x, int y)&#123; int z = 0; z = x + y; return z;&#125;int main()&#123; //int arr[10] = &#123; 0 &#125;; //arr[4];// [] - 下标引用操作符 操作数: arr 和 4 int a = 10; int b = 20; int sum = Add(a, b);// () - 函数调用操作符 操作数: 函数名Add 和 函数的参数a 和 函数参数b printf(&quot;sum=%d\\n&quot;, sum); return 0; // &amp; * 指针部分文章介绍 // . -&gt; 结构体部分文章介绍 &#125; 常见关键字12345678auto 自动 break 中断 case char字符类型 const 常变量 continue 继续 default 默认 do double 类型 else enum 枚举extern 引入(声明)外部符号 float for goto if int long register 寄存器关键字 return 返回 short signed 有符号数 sizeof static 静态的 struct 结构体关键字 switch typedef 类型定义 union 联合体/共用体 unsigned 无符号数 void 无/空 volatile while 循环 auto int a &#x3D; 10;&#x2F;&#x2F;局部变量都是自动变量，所以int前面默认省略auto register int a &#x3D; 10;&#x2F;&#x2F;起到一个建议的作用，建议把a定义成 寄存器变量，最终是由编译器决定寄存器变量不能取地址！！ int a &#x3D;10;&#x2F;&#x2F; signed int 只是把signed省略掉了。int 定义的变量是有符号的数a &#x3D; -2; &#x2F;&#x2F;所以a可以是-2unsigned int b &#x3D; 0;&#x2F;&#x2F;无符号数，这个数字永远是正数 #define是宏定义，仅仅是直接替换,INT_PTR a, b; 进行宏替换后代码是这样的：int *a, b;这里的int *是a的类型，b的类型是int，故此次b只是int类型。而typedef是把该类型定义一个别名，别名是一个独立的类型了，使用这个 类型创建的变量都是这个类型的。 关键字 typedef (类型定义)-类型重定义typedef unsigned int u_int;&#x2F;&#x2F;给unsigned加个别名，叫：u_intunsigned int num &#x3D; 20;&#x2F;&#x2F;所以用起来一模一样u_int num2 &#x3D; 20; 关键字 static - 静态的 12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;1. static 修饰局部变量//从内存的 栈区 变成 储存到内存的 静态区//使局部变量的生命周期变长 --&gt; 变成和程序的生命周期一样 但 作用域不变2. static 修饰全局变量 另一个源文件里static int g_val = 2020;//全局变量是有外部链接属性的 .c文件-&gt;编译-&gt;链接-&gt;可执行文件(exe)//全局变量原本是外部链接属性,static修饰之后,变成内部链接属性.//改变了全局变量的作用域 static静态的全局变量只能在自己所在的源文件内部使用，出了源文件就无法再使用了3. static 修饰函数//也是改变了函数的作用域-不准确//static 修饰函数改变了函数的链接属性//外部链接属性--&gt;内部链接属性 static修饰之后,只能在本源文件内部使用,其他源文件不能使用(修饰函数和修饰全局变量,概念一样)void test()&#123; static int a = 1;//a是一个静态的局部变量 a++; printf(&quot;a=%d\\n&quot;, a);//2 3 4 5 6&#125;//声明外部函数extern int Add(int, int);int main()&#123; int i = 0; while (i &lt; 5) &#123; test(); i++; &#125; //extern - 声明外部符号的 extern int g_val; printf(&quot;g_val=%d\\n&quot;, g_val);//error 另一个源文件里的全局变量static int g_val出了源文件就无法再使用 int a = 10; int b = 20; int sum = Add(a, b); printf(&quot;sum=%d\\n&quot;, sum);//error 另一个源文件里的Add函数被static了 return 0;&#125; #define 定义常量和宏 1234567891011121314151617181920212223242526272829//#define 定义标识符常量//#define MAX 100//#define STR &quot;hehe&quot;//#define 可以定义宏 - 带参数#include&lt;stdio.h&gt;int Max(int x, int y)&#123; if (x &gt; y) return x; else return y;&#125;//宏的定义方式 宏名字用全大写#define MAX(X,Y) (X&gt;Y?X:Y) //宏，变成后面的公式 比自定义函数更简洁//#define ADD(x,y) ((x)+(y)) //宏是有参数的,类似函数的感觉 带括号保证兼容性(参数可能会是公式)int main()&#123; //int a = MAX; int a = 10; int b = 20; //函数 int max = Max(a, b); printf(&quot;max=%d\\n&quot;, max); //宏的方式 max = MAX(a, b); //max=(a&gt;b?a:b); 因为宏的定义，变成这个公式 printf(&quot;max=%d\\n&quot;, max); return 0;&#125; 指针 内存会被划分为小的内存单元，一个内存单元大小是1个字节 每个内存单元都有编号，这个编号被称为：地址&#x2F;指针 地址&#x2F;指针就可以存放在一个变量中，这个变量被称为：指针变量 通过指针变量中存放的地址，就能找到指针指向的空间12345678910111213#include&lt;stdio.h&gt;int main()&#123; int a = 10;//4个字节 int* p = &amp;a;//取地址 int* - 指针变量 printf(&quot;%p\\n&quot;, &amp;a); printf(&quot;%p\\n&quot;, p); *p = 20;// * - 解引用操作符 / 间接访问操作符 原本*p这个地址是数值是10，这里的=20是把*p地址的数改成20 printf(&quot;%d\\n&quot;, a);//则int a也变20 //有一种变量是用来存放地址的 - 指针变量 //printf(&quot;%p\\n&quot;, &amp;a); return 0;&#125; 指针的大小1234567891011121314#include&lt;stdio.h&gt;int main()&#123; char ch = &#x27;w&#x27;; char* pc = &amp;ch;//根据类型不同，指针随之改变 printf(&quot;%d\\n&quot;, sizeof(pc));//4 个字节（32位平台） 如果是8个字节，则64位平台 //*pc = &#x27;a&#x27;; //printf(&quot;%c\\n&quot;, ch); printf(&quot;%d\\n&quot;, sizeof(char*));//4 printf(&quot;%d\\n&quot;, sizeof(short*));//4 printf(&quot;%d\\n&quot;, sizeof(int*));//4 printf(&quot;%d\\n&quot;, sizeof(double*));//4 只要是32位平台，什么类型都是4 return 0;&#125; 结构体复杂对象 - 结构体 - 我们自己创造出来的一种类型 1234567891011121314151617181920212223//创建一个结构体类型#include&lt;stdio.h&gt;struct Book&#123; char name[20];//C语言程序设计 short price;//55&#125;; //;分号不可确少int main()&#123; //利用结构体类型 - 创建一个改类型的变量 struct Book b1 = &#123; &quot;C语言程序设计&quot;,55 &#125;; printf(&quot;书名：%s\\n&quot;, b1.name); printf(&quot;价格：%d元\\n&quot;, b1.price); b1.price = 15; //可以直接修改 printf(&quot;修改后的价格：%d元\\n&quot;, b1.price); struct Book* pb = &amp;b1;//这里定义了一个指针类型struct Book 名叫 pb //利用pb打印出我的书名和价格 //printf(&quot;%s\\n&quot;, (*pb).name);//方法1 .结构体变量.成员 //printf(&quot;%d\\n&quot;, (*pb).price);//(*pb)的（）是为了系统不要误会*pb.name是一个指针变量 printf(&quot;%s\\n&quot;, pb-&gt;name);//方法2 -&gt;结构体指针-&gt;成员 printf(&quot;%d\\n&quot;, pb-&gt;price); return 0;&#125; 字符串修改（例：修改上面这个书名） 12345678#include&lt;string.h&gt; //增加一个string.h头函数int main()&#123; struct Book b1 = &#123; &quot;C语言程序设计&quot;,55 &#125;; strcpy(b1.name, &quot;C++&quot;);//strcpy - string copy - 字符串拷贝-库函数-string.h printf(&quot;%s\\n&quot;, b1.name); return 0;&#125; 本章节完，感谢阅览！后面我会更新发布专门针对各种各样关于语法细节的文章。感兴趣的话，请持续关注我的更新~ 参考文献 https://github.com/soukenki","categories":[{"name":"C语言","slug":"C语言","permalink":"https://soukenki.github.io/zh-CN/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语法","slug":"C语法","permalink":"https://soukenki.github.io/zh-CN/tags/C%E8%AF%AD%E6%B3%95/"}]},{"title":"C语言的初次见面-上","slug":"C语言的初次见面-上","date":"2022-11-22T15:45:25.000Z","updated":"2022-11-23T16:36:53.745Z","comments":true,"path":"2022/11/23/C语言的初次见面-上/","link":"","permalink":"https://soukenki.github.io/zh-CN/2022/11/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2-%E4%B8%8A/","excerpt":"关于本文章，是我第一次接触C的时候，大概了解到的一个框架。比如，本文中的循环只简单介绍了while。这里是文章的上半部分，后面我会更新发布专门针对各种各样关于不同语法细节的文章。感兴趣的话，请持续关注我的更新~ 目录 &gt; 我的第一个C代码 数据类型 实用的函数printf()的形式 计算机中的单位 变量和常量 计算两个数值的和 变量的作用域 变量的生命周期 常量（字面常量）（const修饰的常变量） 常量（#define定义的标识符常量） 常量（枚举常量） 字符串 计算字符串长度 strlen(); 转义字符 ‘\\ddd’ 8进制 ‘\\xdd’ 16进制 注释 选择语句 循环语句","text":"关于本文章，是我第一次接触C的时候，大概了解到的一个框架。比如，本文中的循环只简单介绍了while。这里是文章的上半部分，后面我会更新发布专门针对各种各样关于不同语法细节的文章。感兴趣的话，请持续关注我的更新~ 目录 &gt; 我的第一个C代码 数据类型 实用的函数printf()的形式 计算机中的单位 变量和常量 计算两个数值的和 变量的作用域 变量的生命周期 常量（字面常量）（const修饰的常变量） 常量（#define定义的标识符常量） 常量（枚举常量） 字符串 计算字符串长度 strlen(); 转义字符 ‘\\ddd’ 8进制 ‘\\xdd’ 16进制 注释 选择语句 循环语句 我的第一个C代码 .c文件为 C语言源文件 .h文件为 头文件 包含一个叫stdio.h的文件 std-标准 standard标准 input输入 output输出 1234567891011121314#include&lt;stdio.h&gt;// int是整型的意思，main前面的int表示main函数调用之后返回整型值int main() // 主函数--&gt;程序入口--&gt;有却只有一个&#123; /* 这里做任务,输入函数 函数-print function - printf - 打印函数 */ printf(&quot;hello 你好\\n&quot;); /*printf是库函数-C语言提供使用的函数 别人的东西要打招呼(#include 包含的意思-printf作用是输入输出-使用时最开头要被包含)*/ return 0; //0是整数，return是返回&#125; 数据类型 名称 数据类型 大小 char 字符数据类型 1 short 短整型 2 int 整型 4 long 长整型 4 或 8 long long 更长的整型 8 float 单精度浮点数 4 double 双精度浮点数 8 使用float初始化数据时，在数据后面加上f，编译器默认为double类型，加f让它为float 字符初始化: ‘w’ 字符串初始化: “Name” -&gt; 注意符号区分 1234567891011121314151617181920212223242526272829303132#include&lt;stdio.h&gt;int main()&#123; char ch = &#x27;A&#x27;; //char--字符类型 printf(&quot;%c\\n&quot;,ch); // %c--打印字符格式的数据 \\n--换行的意思 /* %f--打印浮点数字（打小数） %p--以地址的形式打印 %x--打印十六进制数字 %o....*/ //short int //短整型 int age = 20; //整型 printf(&quot;%d\\n&quot;, age); // %d--打印整型十进制数据 //long 长整型 long nom = 11100; printf(&quot;%d\\n&quot;, nom); float f = 5.2; //单精度浮点数 printf(&quot;%f\\n&quot;, f); double d = 3.14; //双精度浮点数 printf(&quot;%lf\\n&quot;, d);//打印双精度浮点数时，用%f可能会丢失精度，所以用%lf更为合适 //sizeof是用来计算括号起来东西的大小 printf(&quot;%d\\n&quot;, sizeof(char)); //1 printf(&quot;%d\\n&quot;, sizeof(short));//2 printf(&quot;%d\\n&quot;, sizeof(int));//4 printf(&quot;%d\\n&quot;, sizeof(long));// 4/8 C语言标准sizeof(long) &gt;或= sizeof(int) 都行,4=4 8&gt;4 printf(&quot;%d\\n&quot;, sizeof(long long));//8 printf(&quot;%d\\n&quot;, sizeof(float));//4 printf(&quot;%d\\n&quot;, sizeof(double));//8 return 0;&#125; 实用的函数printf()的形式 类型 标志 输出最小宽度 精度 长度12printf(&quot;%02d&quot;, x); //补0凑齐2位 输出：09 printf(&quot;%3d&quot;, x); //补空格，凑齐3位 输出：空格空格9 1) 类型 类型字符用以表示输出数据的类型，其格式符和意义如下表所示： %d 以十进制形式输出 带符号 整数 (正数不输出符号) ；补码用%d打印的时候，要算出原码来打印 printf(“%8d\\n”,100); printf(“%6d\\n”,100); printf(“%-8d\\n”,100); printf(“%+8\\n”,100); 输出结果为： └┘└┘└┘└┘└┘100 └┘└┘└┘100 100└┘└┘└┘└┘└┘ └┘└┘└┘└┘└┘100 “-“左对齐 “+”右对齐 %llu 打印 longlong unsigned 类型 （64位平台打印%d的话） %ld 长整型输出 %o 以八进制形式输出 无符号 整数 (不输出前缀0) %x 以十六进制数形式输出整数，或输出字符串的地址（只输出数字，如果要输出0x1234这样的形式的话，需要 %#x 用这种形式进行打印） %u 以十进制数输出unsigned型数据(无符号数)。注意：%d与%u有无符号的数值范围，也就是极限的值，不然数值打印出来会有误。 %c 输出一个字符 %s 输出一个字符串 %f 输出实数，以小数形式输出，默认情况下保留小数点6位,如果以 %.2f 这种写法的话，则保留小数点后2位（同理可1~6）c &#x3D; (float)a &#x2F; b;&#x2F;&#x2F;这里强制类型转换，形式结果不省略，会显示小数点后面的数 %lf 双精度浮点数时，用%f可能会丢失精度，所以用%lf更为合适 %100f 输出实数，保留小数点100位。 %e 数形式输出实数 % 根据大小自动选f格式或e格式，且不输出无意义的零 %p 打印地址 2) 标志 标志字符为 -、+、# 和空格四种，其意义下表所示： - 结果左对齐，右边填空格 + 输出符号(正号或负号) 空格 输出值为正时冠以空格，为负时冠以负号 # 对c，s，d，u类无影响； 对o类， 在输出时加前缀0； 对x类，在输出时加前缀0x； 对e,g,f 类当结果有小数时才给出小数点 3) 输出最小宽度 用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。 4) 精度 精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。 5) 长度 长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。 计算机中的单位 2字节 — 16比特位 2^16-1 4字节 — 32比特位 2^32-1 bit — 比特位 最小，1个比特位只能装1个 1或0 byte — 字节 1个字节 &#x3D; 8个比特位的大小。 kb — 1024个byte mb — 1024个kb gb — 1024个mb tb — 1024个gb 正电 — 1 负电 — 0 二进制：（只有0和1） 10进制：0123456789 日常数字 12进制：时间（12小时一个轮回） 7进制：一周（7天一个轮回） 1234567int main()&#123; short age = 20;//向内存申请2个字节=16比特位，用来存放20这个数值 float weight = 95.6f;//向内存申请4个字节，存放小数，数值后面加f是指定95.6这个数值是float类型 char ch = &#x27;w&#x27;; return 0;&#125; 变量和常量 常量：圆周率、身份证号..不变的值 变量：年龄、体重..可变的值，C语言中变量有两个不同类型（局部变量，全局变量） 变量1234567891011#include&lt;stdio.h&gt;int num1 = 20;//全局变量-定义在代码块&#123;&#125;之外的变量int num2; //一个全局变量不给初始化的话,默认会被初始化为0;int main()&#123; int num1 = 10;//局部变量-定义在代码块&#123;&#125;内部的变量 ;名字相同的话，把这行去掉就直接显示全局 int a; //一个局部变量不给初始化的话,默认是随机值 printf(&quot;%d\\n&quot;, num1);//局部和全局变量的名字尽量不要相同，容易误会出bug； //当局部和全局变量名字相同时，局部优先显示。 return 0;&#125; 计算两个数值的和123456789101112131415161718#include&lt;stdio.h&gt;int main()&#123; int num1 = 0; int num2 = 0; int sum = 0; //C语言语法规定，变量要定义在当前代码块的最前面 /*输入数据-使用输入函数scanf vs2019中加(_s) scanf_s() 的功能虽然与scanf() 相同，但却比 scanf() 安全， 因为 scanf_s() 是针对“ scanf()在读取字符串时不检查边界，可能会造成内存泄露”这个问题设计的。 scanf_s()用于读取字符串时，必须提供一个数字以表明最多读取多少位字符，以防止溢出。 【scanf_s()】这个只能用于vs，其他软件不兼容，缺乏跨平台性，所以尽量不用， 在源文件最前面加上#define _CRT_SECURE_NO_WARNINGS 1 这样就可以让编译器不报错*/ scanf(&quot;%d%d&quot;,&amp;num1,&amp;num2);//取地址符号&amp; scanf输入的值太大的话，还是会硬塞入内存中，导致溢出 sum = num1 + num2; //scanf不会关心目标空间到底放不放得下 printf(&quot;sum=%d\\n&quot;, sum);//%d前面的（sum=）会在调试中显示出来 return 0;&#125; while(scanf(“%d”,&amp;a) &#x3D;&#x3D; 1) &#x2F;&#x2F;scanf成功读取到输入信息时,返回值为1 ;如果无法读取输入信息时,返回值为EOF EOF值为-1while(scanf(“%d”,&amp;a) !&#x3D; EOF) 退出程序按 ctrl + z 变量的作用域1234567891011121314151617181920#include&lt;stdio.h&gt;int global = 2020;//全局变量的作用域是整个工程void test()&#123; printf(&quot;test()--%d\\n&quot;, global);//这里不运行，只是声明&#125;int main()&#123; &#123; int num = 0; //局部变量的作用域是，局部变量坐在的&#123;&#125;里面才起作用， printf(&quot;num=%d\\n&quot;, num);//如果把printf(&quot;num=%d\\n&quot;, num);移到变量int num = 0;的&#123;&#125;以外，不起作用 &#125; printf(&quot;global=%d\\n&quot;, global); test();//在main里调用了void函数，所以会执行 //在同一个工程中，不同的源文件里有一个全局变数int g_val = 2021; //声明 extern外部符号的(其他源文件里的全局变数) extern int g_val; printf(&quot;g_val=%d\\n&quot;, g_val); //这时就会显示g_val = 2021 return 0;&#125; 变量的生命周期局部变量的生命周期是在{}里面的，而全局变量的生命周期则是整个程序的生命周期 12345678910#include&lt;stdio.h&gt;int main()&#123; &#123;//生命周期开始 int a = 10; printf(&quot;a=%d\\n&quot;, a);//ok &#125;//生命周期结束 printf(&quot;a=%d\\n&quot;, a);//error(错误) return 0;&#125; 常量（字面常量）（const修饰的常变量）const - 常属性 123456789101112131415#include&lt;stdio.h&gt;int main()&#123; //const-常属性， //const int n = 10;//n是变量，但是又有常属性，所以我们说n是常变量 //int arr[10] = &#123; 0 &#125;;//数组[]中必须用常量数值才能运行，不可以用常变量代替 const int num = 4;//int num是把num定义为4，属于变量，前面加上const,变成const修饰的常变量 printf(&quot;%d\\n&quot;,num); num = 8;//前面int num=4是变量，可运行。但是加const变成常变量时，num=8就会error printf(&quot;%d\\n&quot;, num); 3;//字面常量 3.14;//字面常量 return 0;&#125; 常量（#define定义的标识符常量）123456789#include&lt;stdio.h&gt; //#define 定义的标识符常量 (define宏定义）#define MAX 10 //定义一个常量叫MAX的符号，后面10是定义为10的意思int main()&#123; int arr[MAX] = &#123;0&#125;;//用定义符定义的常量，可以在数组[]中使用 printf(&quot;%d\\n&quot;, MAX); return 0;&#125; 常量（枚举常量）（例1：）12345678910111213141516171819//枚举常量//枚举-一一列举（性别：男，女，保密。三原色：红，黄，蓝。）//枚举关键字 - enumenum Sex //性别,英文：男，女，保密&#123; MALE, FEMALE, SECRET&#125;; //MALE,FEMALE,SECRET这3个值-枚举常量#include&lt;stdio.h&gt;int main()&#123; //enum Sex s = MALE;//名叫s的人是男的 enum Sex s = MALE;//枚举取值只能取设定好的值:只能是MALE,FEMALE,SECRET其中一个 printf(&quot;%d\\n&quot;, MALE);//枚举常量是有值的，且默认顺序为0，1，2...并且不可被改变 printf(&quot;%d\\n&quot;, FEMALE); printf(&quot;%d\\n&quot;, SECRET); return 0;&#125; （例2：）12345678910111213enum Color //颜色，红黄蓝&#123; RED, YELLOW, BLUE&#125;;int main()&#123; enum Color color = BLUE;//名称为color的颜色为蓝色BLUE color = YELLOW;//这个color只是某物品名称，是变量，可以被改 //BLUE = 6;//这个是枚举定义的常量，必须按默认0，1，2...颜色本身不能被改，所以error return 0;&#125; 字符串字符串 — 由””括起来的字符‘\\0’ — 转义字符 — 0 1234567891011121314151617#include&lt;stdio.h&gt; // 0-数字0int main() // &#x27;0&#x27;--&gt;字符0，ASCII值：48&#123; char arr1[] = &quot;abc&quot;;//数组 //&quot;abc&quot;相当于&#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27;&#x27;\\0&#x27;------&#x27;\\0&#x27;字符串结束标志 char arr2[] = &#123; &#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;\\0&#x27;&#125;; //&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;只有&#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27;,没有结束标志。所以用&#123;&#125;打字符串时，要加入&#x27;\\0&#x27;或者0，代表字符结束。 printf(&quot;%s\\n&quot;, arr1);//打印字符串用%s printf(&quot;%s\\n&quot;, arr2);//没有遇到\\0的话,会一直往后面读取,导致报错 &quot;hello bit&quot;; &quot;&quot;;//空字符串 return 0; //数据在计算机上存储的时候，存储的是2进制 //每个字符都有它们对应的值#aA$hud... 比如：a-97 A-65 \\0-0 ... //ASCII 编码，每个字符都有ASCII码 //ASCII 码值，每个ASCII码对应的值&#125; 计算字符串长度 strlen();12345678910#include&lt;stdio.h&gt;#include&lt;string.h&gt; //strlen函数的头文件（计算长度的头文件）int main()&#123; char arr1[] = &quot;abc&quot;;//长度：3 char arr2[] = &#123; &#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;//长度：不加\\0，结果为随机值；加上&#x27;\\0&#x27;后，长度为3。 printf(&quot;%d\\n&quot;, strlen(arr1));//strlen - string length - 用来计算字符串长度的 printf(&quot;%d\\n&quot;, strlen(arr2)); return 0;&#125; 这里的\\0是转义字符，转义字符的意思是-在字符前面加上’&#39;，从而改变字符原有的意思。 比如：’\\n’-从字面’n’变为’换行’的意思， ‘\\t’ –&gt; ‘水平制表符’， ‘\\r’ –&gt; ‘回车’….. (详细请看下面转义字符规律图表) 转义字符 转义字符 意义 ASCII码值（十进制） \\a 响铃(BEL),警告字符 007 \\b 退格(BS) ，将当前位置移到前一列 008 \\f 换页(FF)，将当前位置移到下页开头 012 \\n 换行(LF) ，将当前位置移到下一行开头 010 \\r 回车(CR) ，将当前位置移到本行开头 013 \\t 水平制表(HT) （跳到下一个TAB位置） 009 \\v 垂直制表(VT) 011 \\\\ 代表一个反斜线字符’’&#39; 092 \\‘ 代表一个单引号（撇号）字符 039 \\“ 代表一个双引号字符 034 \\? 代表一个问号, 防止识别为三字母词(are you ok??)&#x3D;&gt;(are you ok] ??) &#x3D;&gt; ] 063 \\0 空字符(NUL) 000 \\ddd ddd表示1~3个八进制的数字 三位八进制 \\xdd dd表示2个十六进制数字 十六进制 例：123456789#include&lt;stdio.h&gt;int main()&#123; printf(&quot;c:\\\\2013\\\\music\\\\zhou.mp3&quot;);//为防止系统把&#x27;\\&#x27;理解为转义字符，把&#x27;\\&#x27;写作&#x27;\\\\&#x27; //这时得到的结果是c:\\2013\\music\\zhou.mp3这样的地址 printf(&quot;%c\\n&quot;, &#x27;\\&#x27;&#x27;);//同理：&#x27;--&gt;\\&#x27; 才能打出符号&#x27; printf(&quot;%s\\n&quot;, &quot;\\&quot;&quot;);//字符串也是同理 return 0;&#125; ‘\\ddd’ 8进制1234567891011121314#include&lt;stdio.h&gt;#include&lt;string.h&gt; //计算长度的头文件int main()&#123; printf(&quot;%d\\n&quot;, strlen(&quot;c:\\test\\32\\test.c&quot;));//长度为13，但是为什么是13呢 \\t算一个字符 printf(&quot;%c\\n&quot;, &#x27;\\32&#x27;);//显示&quot;→&quot; //\\32 -- 32是2个8进制数字 （不能出现8，9这种超过7的数值） 3*8^1+2*8^0 = 24+2 =26 26在ASCII码中是&#x27;→&#x27; //32作为8进制--&gt;10进制数字，10进制--&gt;ASCII码值对应的字符 //32--&gt;10进制 26-&gt;作为ASCII码值代表的字符 printf(&quot;%c\\n&quot;, &#x27;\\132&#x27;);//显示&#x27;Z&#x27; // 八进制算法：\\132 -- 1*8^2+3*8^1+2*8^0 = 64+24+2 = 90 --&gt; ASCII码值为：&#x27;Z&#x27; //所以\\32是一个字符&#x27;→&#x27; return 0;&#125; ‘\\xdd’ 16进制123456#include&lt;stdio.h&gt;int main() // &#x27;\\&#x27;后面的只是数字：8进制；如果是&#x27;\\x&#x27;加数字：16进制。&#123; printf(&quot;%c\\n&quot;, &#x27;\\x61&#x27;);//十六进制算法：\\x61 -- 6*16^1+1*16^0 = 96+1= 97 --&gt; ASCII码值为：&#x27;a&#x27; return 0;//把16进制换成10进制,然后对应相对应的ASCII码值.&#125; 注释 C语言风格：&#x2F;*xxxxxxxx*&#x2F; 缺点：不支持嵌套(&#x2F;*xxxx&#x2F;*xx*&#x2F;xxxx*&#x2F;)后面一部分不被注释 C++风格：&#x2F;&#x2F;xxxxxxxxxx 可以注释一行也可以注释多行（推荐用这种） 选择语句123456789101112131415#include&lt;stdio.h&gt;#include&lt;string.h&gt;int main()&#123; int input = 0; printf(&quot;在大学里\\n&quot;); printf(&quot;你要好好学习吗？请输入(1,0)&gt;:&quot;); scanf(&quot;%d&quot;, &amp;input); //输入函数，选择输入1/0 if (1 == input) //if-如果 一个&#x27; = &#x27;表示赋值，两个&#x27; = &#x27;表示判断是否相等。 printf(&quot;好offer\\n&quot;); //else //else-其他 if (0 == input) //这种也可以用 printf(&quot;卖红薯\\n&quot;); return 0;&#125; 循环语句 while语句 for语句 do…while语句while例：123456789101112131415#include&lt;stdio.h&gt;int main()&#123; printf(&quot;在大学里\\n&quot;); int line = 0; while (line &lt; 20000) &#123; printf(&quot;敲一行代码:%d\\n&quot;,line); line++; //使变量的值增加1 同理&#x27;--&#x27;使值减1 &#125; if (line &gt;= 20000) //一直循环，直到&gt;或=20000 printf(&quot;好offer\\n&quot;); return 0;&#125; （本篇未完，请继续浏览《C语言的初次见面-下》） 参考文献 https://github.com/soukenki","categories":[{"name":"C语言","slug":"C语言","permalink":"https://soukenki.github.io/zh-CN/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语法","slug":"C语法","permalink":"https://soukenki.github.io/zh-CN/tags/C%E8%AF%AD%E6%B3%95/"}]},{"title":"初次见面，我的第一篇文章","slug":"初次见面，我的第一篇文章","date":"2022-11-22T15:45:05.000Z","updated":"2022-11-22T16:09:11.866Z","comments":true,"path":"2022/11/23/初次见面，我的第一篇文章/","link":"","permalink":"https://soukenki.github.io/zh-CN/2022/11/23/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2%EF%BC%8C%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"目录 自我介绍 目标 分享 我的代码库","text":"目录 自我介绍 目标 分享 我的代码库 自我介绍大家好，我叫曹建熙。这是我的个人博客，我会在这里分享我学习代码时的理解和心得。 现在是在日本的留学生，学习计算机知识。性格乐观开朗，爱好是旅行、美食、音乐、钓鱼等。 大家如果有什么建议或者疑问，都可以通过邮件、微信或者line联系我。 目标活到老学到老，希望自己可以一直坚持学习。不断提高自己的技术水平，向大牛们学习。 分享最后分享一些旅行和美食的照片。 瑞龙寺 高冈大佛 和牛牛排 我的代码库 https://github.com/soukenki","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://soukenki.github.io/zh-CN/tags/%E6%9D%82%E8%B0%88/"}]}],"categories":[{"name":"C语言","slug":"C语言","permalink":"https://soukenki.github.io/zh-CN/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语法","slug":"C语法","permalink":"https://soukenki.github.io/zh-CN/tags/C%E8%AF%AD%E6%B3%95/"},{"name":"杂谈","slug":"杂谈","permalink":"https://soukenki.github.io/zh-CN/tags/%E6%9D%82%E8%B0%88/"}]}