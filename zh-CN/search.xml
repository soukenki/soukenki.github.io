<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言-分支和循环-上</title>
    <url>/zh-CN/2022/11/25/C%E8%AF%AD%E8%A8%80-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF-%E4%B8%8A/</url>
    <content><![CDATA[<p> <strong>关于本文章</strong>，介绍了C语言中的分支语句和循环语句，最后会附上例题练习题的题解哦~<br><strong>目录 &gt;</strong></p>
<ul>
<li>分支语句<ul>
<li>if 语句</li>
<li>switch 语句</li>
</ul>
</li>
<li>循环语句<ul>
<li>while 循环</li>
<li>for 循环</li>
<li>do…while() 循环</li>
</ul>
</li>
<li>练习题<ul>
<li>二分查找算法<span id="more"></span>
<br></li>
</ul>
</li>
</ul>
<h1 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h1><ol>
<li>if      </li>
<li>switch</li>
</ol>
<p>C语言是一门 结构化 的程序设计语言</p>
<ul>
<li>顺序结构   （从头走到尾） </li>
<li>选择结构   （分支语句、选择语句）*</li>
<li>循环结构   （循环语句）*</li>
</ul>
<p>C语言中的真假：0为假，非0为真（-1也是真）<br><br></p>
<h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><ul>
<li>单分支：<br><img src="/zh-CN/images/c/c02001.png"></li>
</ul>
<figure class="highlight c"><figcaption><span>1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">   语句;<span class="comment">//表达式如果为真，语句也为真；否则，上面什么都不执行。</span></span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c02002.png"> </p>
<figure class="highlight c"><figcaption><span>2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">   语句<span class="number">1</span>;<span class="comment">//表达式如果为真，语句1会被执行；否则执行语句2。</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   语句<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<br>

<ul>
<li>多分支:<br><img src="/zh-CN/images/c/c02003.png"> <figure class="highlight c"><figcaption><span>3</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line">   语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) <span class="comment">//表达式1如果为真，语句1会被执行；否则执行语句2；再否则执行语句3。</span></span><br><span class="line">   语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   语句<span class="number">3</span>; <span class="comment">//这里语句只能被执行1个。\</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>写法1：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> age = <span class="number">45</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">28</span>)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">28</span> &amp;&amp; age &lt; <span class="number">50</span>)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">50</span> &amp;&amp; age &lt; <span class="number">90</span>)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写法2：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> age = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">28</span>)</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">28</span> &amp;&amp; age &lt; <span class="number">50</span>)</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">50</span> &amp;&amp; age &lt; <span class="number">90</span>)</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>两种写法完全一样的。</strong><br><br><br>如果条件成立，要执行多条语句，则使用代码块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;不能谈恋爱\n&quot;</span>);</span><br><span class="line">        &#125;                           <span class="comment">//这里的一对大括号&#123;&#125;叫做代码块</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于新人很不友好的if语句问题：<br><strong>悬空 else</strong>问题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>   <span class="comment">//要小心悬空else</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>)   <span class="comment">//这里为假，后面的都不执行了。后面的else跟第二个if匹配，所以跟这里没有关系</span></span><br><span class="line">               <span class="keyword">if</span> (b == <span class="number">20</span>)</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>); <span class="comment">//else是跟离它最近的，未匹配的if，进行匹配。所以这里匹配的是第二个if</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;          <span class="comment">//如果else想要和第一个if匹配，就用&#123;&#125;把第二个if和printf框起来</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：else是跟离它最近的，未匹配的if，进行匹配。</strong><br>所以，适当的使用{}可以使代码的逻辑更加清楚。<br><br></p>
<p>if书写形式的对比：</p>
<figure class="highlight c"><figcaption><span>代码1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;   </span><br><span class="line">  <span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>代码2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) </span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em><strong>代码2风格更好一点,可读性更强</strong></em><br><br></p>
<p>判断相等时，反过来写风格更好：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> == num)     <span class="comment">//判断相等时，反过来写可以确保不会出错</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if (num = 5)    // = 是赋值，== 判断相等</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//      printf(&quot;呵呵\n&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>练习：<br>1，判断一个数是否为奇数<br>2，输出1~100之间的奇数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//int b = 0;</span></span><br><span class="line">        <span class="comment">//while (b &lt;= 100)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//      if (1 == b % 2)</span></span><br><span class="line">        <span class="comment">//      printf(&quot;%d\n&quot;, b);</span></span><br><span class="line">        <span class="comment">//             b++;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &lt;= <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">               a += <span class="number">2</span>;        <span class="comment">//这种方式int a要=1，才能循环出奇数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == a % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;奇数\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><p>switch写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>（整型表达式）<span class="comment">//括号里必须要是整型</span></span><br><span class="line">&#123;</span><br><span class="line">    语句项； <span class="comment">//语句项是一些case语句，case后面是 整型常量表达式 ：</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);<span class="comment">//在scanf进行输入的时候，如果遇到空格，就会结束输入。</span></span><br><span class="line">        <span class="keyword">switch</span> (day)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;星期1\n&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;           <span class="comment">//break中断语句，直接跳到&#125;后面</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;星期2\n&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;星期3\n&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:          <span class="comment">//默认，输入没有的选项时，尽量每次case语句项都加default和break</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);<span class="comment">//可以是空白</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//switch (day)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//case 1:</span></span><br><span class="line">        <span class="comment">//case 2:</span></span><br><span class="line">        <span class="comment">//case 3:      </span></span><br><span class="line">        <span class="comment">//case 4:</span></span><br><span class="line">        <span class="comment">//      printf(&quot;工作日\n&quot;);//输入1~4都会显示工作日，语句项可以为空白</span></span><br><span class="line">        <span class="comment">//      break;</span></span><br><span class="line">        <span class="comment">//case 5:</span></span><br><span class="line">        <span class="comment">//case 6:</span></span><br><span class="line">        <span class="comment">//      printf(&quot;休息日\n&quot;);</span></span><br><span class="line">        <span class="comment">//      break;    //即使是最后一个，最好也加上break</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>default</strong> 在case语句项中没有规定位置，前后都可以用<br><strong>if</strong>  在case语句项中可以被使用<br><br></p>
<p>练习：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> m = <span class="number">2</span>;     </span><br><span class="line">     <span class="keyword">switch</span> (n)     </span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">           m++;     </span><br><span class="line">     <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">           n++;     </span><br><span class="line">     <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">switch</span> (n)</span><br><span class="line">              &#123;<span class="comment">//switch允许嵌套使用              </span></span><br><span class="line">                  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   n++;              <span class="comment">//运行到case3的switch(n)时，以n为入口，这时的n=2,所以直接走case3里的case2</span></span><br><span class="line">                  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   m++;                    </span><br><span class="line">                   n++;                     </span><br><span class="line">                   <span class="keyword">break</span>;             </span><br><span class="line">                &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">           m++;              </span><br><span class="line">           <span class="keyword">break</span>;     </span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;     </span><br><span class="line">  &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;m = %d, n = %d\n&quot;</span>, m, n);<span class="comment">//结果为m=5 n=3</span></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><ol>
<li>while</li>
<li>for</li>
<li>do while</li>
</ol>
<p><img src="/zh-CN/images/c/c02004.jpg"> </p>
<br>

<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)   <span class="comment">//表达式为真，运行循环语句</span></span><br><span class="line">     循环语句;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><figcaption><span>例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)           <span class="comment">//这里把if语句的if换成while，变成死循环</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>break 中止; continue 继续;</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="keyword">if</span> (i == <span class="number">9</span>)</span><br><span class="line">                       <span class="keyword">break</span>;  <span class="comment">//break用于永久中止循环。i循环到5时，停止循环，直接跳到 &#125; ，所以没有经过printf，就没有打印出来</span></span><br><span class="line">               <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">                       <span class="keyword">continue</span>;<span class="comment">//continue用于中止本次循环，（后面的printf本次不打印）回到上面while重新开始循环</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">               i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>scanf();遇到’\n’结束,’\n’前面的数据会被取走.<br><br></p>
<p>int ch &#x3D; getchar()  <strong>输入一个字符</strong></p>
<ul>
<li>getchar函数的返回值是int类型，因为返回的是字符的ASCII码值。</li>
<li>因为是从缓冲区中读取字符，需要先清空缓冲区</li>
</ul>
<p> <strong>清空缓冲区的方法：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>getchar()每工作一次,就会从缓冲区中取走一个字符</li>
</ul>
<p><strong>putchar(ch)  打印字符</strong></p>
<ul>
<li>读取int类型ch的值，打印对应的ASCII码值的字符</li>
</ul>
<br>

<p>练习：while((ch&#x3D;getchar()) !&#x3D;EOF)  &#x2F;&#x2F; 创建循环输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> ch = <span class="number">0</span>;                    <span class="comment">//ctrl + z</span></span><br><span class="line">        <span class="keyword">while</span> ((ch = getchar()) !=EOF) <span class="comment">//EOF - end of file -&gt; 值为-1  （文件结束标志）</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">putchar</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//int ch = getchar();    //输入</span></span><br><span class="line">        <span class="comment">//putchar(ch);           //输出，与printf函数一样</span></span><br><span class="line">        <span class="comment">//用法1：</span></span><br><span class="line">        <span class="comment">//while((ch=getchar()) !=&#x27;\n&#x27;)    //当我们用printf打印之后，会在输入缓冲区剩下东西，这个代码可以帮助我们清空</span></span><br><span class="line">        <span class="comment">//&#123;                            //循环读取缓冲区的数，直到不等于&#x27;\n&#x27;，这时缓冲区被清空，跳出循环</span></span><br><span class="line">        <span class="comment">//    ;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//用法2：</span></span><br><span class="line">        <span class="comment">//while((ch=getchar()) !=EOF) //创建循环输入</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    if(ch&lt;&#x27;0&#x27; || ch&gt;&#x27;9&#x27;)      //ch小于0并且大于9的值，全部跳过本次循环</span></span><br><span class="line">        <span class="comment">//        continue;            //所以这里 只有0~9可以被输出</span></span><br><span class="line">        <span class="comment">//       putchar(ch);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下三个要素是循环最重要的  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>三要素：<span class="type">int</span> i =<span class="number">0</span>;  <span class="comment">//初始化             </span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) <span class="comment">//判断</span></span><br><span class="line">&#123;</span><br><span class="line">   i++；   <span class="comment">//调整</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p>后期代码越多，三个要素隔得越开，不方便调节。所以衍生出for循环<br><br></p>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>；表达式<span class="number">2</span>；表达式<span class="number">3</span>)   <span class="comment">//表达式1：初始化；表达式2：判断；表达式3：调整。</span></span><br><span class="line">    循环语句;                    <span class="comment">//循序：1-&gt;2-&gt;循环语句-&gt;3-&gt;2-&gt;循环语句-&gt;3-&gt;2...</span></span><br></pre></td></tr></table></figure>
<p>这里<strong>continue</strong>只会跳过循环语句，不会跳过表达式3</p>
<figure class="highlight c"><figcaption><span>使用例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  初始化  判断   调整   三要素一起合在for循环中</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt;= <span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="comment">//if (i == 5)</span></span><br><span class="line">               <span class="comment">//      break;        //这里break也是中止整个循环，跳到&#125;</span></span><br><span class="line">               <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">                       <span class="keyword">continue</span>;     <span class="comment">//这里continue也是中止本次循环，跳到&#125; ,但不会死循环</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议：</p>
<ol>
<li>不可在for 循环体内修改循环变量，防止 for  循环失去控制。 (不要给变量’&#x3D;‘赋值)</li>
<li>建议for 语句的循环控制变量的取值采用“前闭后开区间”写法。(for(i&#x3D;0;i&lt;10;i++)这种写法比较好，尽量别写i&lt;&#x3D;9，虽然打印出来效果一样)<br></li>
</ol>
<p>for的变种1：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>for循环的初始化、判断、调整 都可以省略。但是、for循环的判断部分如果被省略，那判断条件就是：恒为真</li>
<li>如果不是非常熟练，建议大家不要随便省略<figure class="highlight c"><figcaption><span>变种例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//for(;;)</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (a=<span class="number">0</span>;a&lt;<span class="number">10</span>;a++)  <span class="comment">//得出的结果为：100次hehe</span></span><br><span class="line">        &#123;                     <span class="comment">//但是，如果省略a=0和b=0的话，只会打出10个hehe。</span></span><br><span class="line">               <span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">10</span>;b++) <span class="comment">//因为当第2个for结束循环时，b=10，第1个for循环进去，b为假，又跳出来，所以不会发生改变</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>for的变种2：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>, y = <span class="number">0</span>; x &lt; <span class="number">2</span> &amp;&amp; y &lt; <span class="number">5</span>; ++x, y++) <span class="comment">//++不管前置还是后置都是加一</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);      <span class="comment">//得两个hehe，第三次x=2，为假，跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>for (i &#x3D; 0, k &#x3D; 0; k &#x3D; 0 ; i++, k++) </li>
<li>第二个表达式一个&#x3D;是赋值，所以表达式2为0，判断为0的话，表达式为假直接跳出循环，所以循环0次<br></li>
</ul>
<h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while() 循环"></a>do…while() 循环</h2><p>do语句得语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环语句；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="comment">//if (i == 5)</span></span><br><span class="line">               <span class="comment">//      break;   //结果为：1 2 3 4，中止整个循环</span></span><br><span class="line">               <span class="comment">//if (i == 5) </span></span><br><span class="line">               <span class="comment">//      continue;  //结果为：1 2 3 4 死循环</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">               i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><figure class="highlight c"><figcaption><span>阶乘</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= <span class="number">10</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">               ret = ret * b;       </span><br><span class="line">               <span class="comment">//b的阶乘</span></span><br><span class="line">               sum = sum + ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写一个代码，在arr数组（有序的）中找到XXX</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line">        <span class="comment">//写一个代码，在arr数组（有序的）中找到7</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//计算元素个数 = 数组总大小 / 每个元素的大小</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="keyword">if</span> (k == arr[i])</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d \n&quot;</span>, i);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == sz)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><p>折半查找算法,二分查找算法　　（必须要是 有序数组，才可以用二分查找）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">7</span>;                              <span class="comment">//要找的数</span></span><br><span class="line">        <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//计算元素个数 = 数组总大小 / 每个元素的大小</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;                <span class="comment">//左下标</span></span><br><span class="line">        <span class="type">int</span> right = sz - <span class="number">1</span>;          <span class="comment">//右下标</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)         <span class="comment">//条件: 左 &lt;= 右</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;  <span class="comment">//中间元素的下标 （这种算法不够好，如果左右的值太大，相加起来可能会越界）</span></span><br><span class="line">               <span class="comment">// int mid = left + (right - left) / 2;   //这样算法更好，不会越界访问，也能求出平均值</span></span><br><span class="line">              <span class="comment">//  int mid = left + ((right - left)&gt;&gt; 1); //这种也好，二进制位右移1，则相当于除了2</span></span><br><span class="line">               <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">               &#123;</span><br><span class="line">                       right = mid - <span class="number">1</span>;       <span class="comment">//折中后的右下标</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">               &#123;</span><br><span class="line">                       left = mid + <span class="number">1</span>;        <span class="comment">//折中后的左下标</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;找到了,下标是: %d\n&quot;</span>, mid);    <span class="comment">//折中后的中点</span></span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right)              <span class="comment">//条件:左 &gt; 右 (增加稳定性)</span></span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
（本篇分支和循环语法介绍结束，更多练习题题解请继续浏览《C语言-分支和循环-下》）

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
<li>分支语句结构图出自：<a href="https://www.cnblogs.com/wlfya/p/14003562.html">https://www.cnblogs.com/wlfya/p/14003562.html</a></li>
<li>循环语句结构图出自：<a href="https://www.lidihuo.com/python/python-for.html">https://www.lidihuo.com/python/python-for.html</a></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语法</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-分支和循环-下</title>
    <url>/zh-CN/2022/11/25/C%E8%AF%AD%E8%A8%80-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF-%E4%B8%8B/</url>
    <content><![CDATA[<p> <strong>关于本文章</strong>，介绍了C语言中的关于分支语句和循环语句的例题练习题的题解哦~<br><strong>目录 &gt;</strong></p>
<ul>
<li>练习题<ul>
<li>比较两个字符串是否相等</li>
<li>求最大公约数</li>
<li>打印1000~2000之间的闰年</li>
<li>打印100~200之间的素数</li>
<li>找最大值</li>
<li>打印9*9乘法口诀表</li>
<li>水仙花数<ul>
<li>变种水仙花数</li>
</ul>
</li>
<li>打印菱形</li>
<li>喝汽水</li>
<li>杨辉三角</li>
<li>猜凶手</li>
<li>比赛预测</li>
</ul>
</li>
<li>其他<ul>
<li>关机小程序<span id="more"></span>
<br></li>
</ul>
</li>
</ul>
<h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><p>练习</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span> <span class="comment">//Sleep 停止函数的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">//system 执行系统命令函数的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;welcome to beijin!!!!!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;###################&quot;</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//int right = sizeof(arr1) / sizeof(arr1[0]) - 2;//这里-1是errer，因为还有个隐藏的\n,所以要-2</span></span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">strlen</span>(arr1) - <span class="number">1</span>;             <span class="comment">//函数strlen计算数组长度,-1是因为隐藏的\n</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        arr2[left] = arr1[left];</span><br><span class="line">        arr2[right] = arr1[right];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">        <span class="comment">//打印一次休息一秒</span></span><br><span class="line">        Sleep(<span class="number">1000</span>);   <span class="comment">//停止,时间单位是毫秒</span></span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>); <span class="comment">//执行系统命令的一个函数- cls -清空屏幕</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right)    <span class="comment">//这句和break;在这里可以省略</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="比较两个字符串是否相等"><a href="#比较两个字符串是否相等" class="headerlink" title="比较两个字符串是否相等"></a>比较两个字符串是否相等</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>  <span class="comment">//库函数strcmp:比较两个字符串是否相等;当两个字符串相等时,返回一个0,所以用==0来判断</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(password,<span class="string">&quot;123456&quot;</span>)==<span class="number">0</span>)  <span class="comment">// == 不能用来比较两个字符串是否相等,应该使用一个库函数- strcmp</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;登录成功!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;密码错误,登录失败\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;三次密码均错误,退出程序\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;                       <span class="comment">//求最大公约数</span></span><br><span class="line">    <span class="type">int</span> m = <span class="number">24</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">18</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (r = m%n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//r = m % n;</span></span><br><span class="line">        m = n;</span><br><span class="line">        n = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最小公倍数：  </p>
<ul>
<li>如果 a 和 b 的最大公约数是 m</li>
</ul>
<p>那么，</p>
<ul>
<li>最小公倍数为： a * b &#x2F; m ; <br></li>
</ul>
<h2 id="打印1000-2000之间的闰年"><a href="#打印1000-2000之间的闰年" class="headerlink" title="打印1000~2000之间的闰年"></a>打印1000~2000之间的闰年</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (year = <span class="number">1000</span>; year &lt;= <span class="number">2000</span>; year++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断1000~2000年之间year是否为闰年</span></span><br><span class="line">        <span class="comment">//1.能被4整除,且不能被100整除,是闰年</span></span><br><span class="line">        <span class="comment">//2.能被400整除是闰年</span></span><br><span class="line">        <span class="comment">//if (year % 4 == 0 &amp;&amp; year % 100 != 0)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//      printf(&quot;%d &quot;, year);</span></span><br><span class="line">        <span class="comment">//      count++;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//else if (year % 400 == 0)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//      printf(&quot;%d &quot;, year);</span></span><br><span class="line">        <span class="comment">//      count++;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, year);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d\n&quot;</span>, count);<span class="comment">//闰年的数量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="打印100-200之间的素数"><a href="#打印100-200之间的素数" class="headerlink" title="打印100~200之间的素数"></a>打印100~200之间的素数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span>   <span class="comment">//数学库函数</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i+=<span class="number">2</span>) <span class="comment">//从奇数中找更快</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断i是否为素数</span></span><br><span class="line">        <span class="comment">//素数判断的规则</span></span><br><span class="line">        <span class="comment">//1.试除法</span></span><br><span class="line">        <span class="comment">//产生2-&gt;i-1</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;=<span class="built_in">sqrt</span>(i); j++)   <span class="comment">//库函数sqrt - 开平方    从开平方后的数中找，更快</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="built_in">sqrt</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d &quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="找最大值"><a href="#找最大值" class="headerlink" title="找最大值"></a>找最大值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">-4</span>,<span class="number">-5</span>,<span class="number">-6</span>,<span class="number">-7</span>,<span class="number">-8</span>,<span class="number">-9</span>,<span class="number">-10</span> &#125;; <span class="comment">//找最大值</span></span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];<span class="comment">//假设是最大值</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//计算元素个数 = 数组总大小 / 每个元素的大小</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d &quot;</span>, max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="打印9-9乘法口诀表"><a href="#打印9-9乘法口诀表" class="headerlink" title="打印9*9乘法口诀表"></a>打印9*9乘法口诀表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;=a;b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-2d &quot;</span>, a, b, a * b);<span class="comment">// %2d两位右对齐， %-2d两位左对其，位数不够自动空格填充</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h2><p>求出0~100000之间的所有“水仙花数”并输出。 ———————— 自幂数<br>“水仙花数”是指 一个n位数，其各位数字的n次方之和，恰好等于该数本身。<br>如：153 &#x3D; 1^3+ 5^3+ 3^3 ,则 153 是一个 “水仙花数”。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span> <span class="comment">//pow函数的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断i是否为自幂数</span></span><br><span class="line">        <span class="comment">//1.计算i的位数 - n</span></span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tmp = i;</span><br><span class="line">        <span class="keyword">while</span> (tmp / <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">            tmp = tmp / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.计算i的每一位的n次方之和</span></span><br><span class="line">        tmp = i;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//pow函数是用来 求次方数</span></span><br><span class="line">            sum += <span class="built_in">pow</span>(tmp % <span class="number">10</span>, n);</span><br><span class="line">            tmp = tmp / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (sum == i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="变种水仙花数"><a href="#变种水仙花数" class="headerlink" title="变种水仙花数"></a>变种水仙花数</h3><p>变种水仙花数 - Lily Number：把任意的数字，从中间拆分成两个数字，比如1461 可以拆分成（1和461）,（14和61）,（146和1),如果所有拆分后的乘积之和等于自身，则是一个Lily Number。<br>例如：<br>655 &#x3D; 6 * 55 + 65 * 5<br>1461 &#x3D; 1*461 + 14*61 + 146*1<br>求出 5位数中的所有 Lily Number。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">10000</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//所有的五位数中判断i是否为lily number</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)<span class="comment">//10的j次方</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> m = i % (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, j);<span class="comment">//pow函数返回值为float，所以需要强制类型转换</span></span><br><span class="line">            <span class="type">int</span> n = i / (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, j);<span class="comment">//pow(10 ,j) == 10的j次方</span></span><br><span class="line">            sum += m * n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;line);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//上 line行</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印一行</span></span><br><span class="line">        <span class="comment">//空格</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; line - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//*</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//下 line-1行</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; line - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印一行</span></span><br><span class="line">        <span class="comment">//空格</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//*</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * (line - <span class="number">1</span> - i) - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="喝汽水"><a href="#喝汽水" class="headerlink" title="喝汽水"></a>喝汽水</h2><p>20块钱买汽水，1元1瓶，2个空瓶可以换1瓶汽水，共能喝多少瓶？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;money);</span><br><span class="line">    <span class="keyword">if</span> (money &gt; <span class="number">0</span>)</span><br><span class="line">        total = <span class="number">2</span> * money - <span class="number">1</span>;  <span class="comment">//这种算法更好</span></span><br><span class="line">    <span class="comment">//int total = money;</span></span><br><span class="line">    <span class="comment">//int empty = money;</span></span><br><span class="line">    <span class="comment">////开始置换空瓶</span></span><br><span class="line">    <span class="comment">//while (empty &gt;= 2)      //常规</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//      total += empty / 2;</span></span><br><span class="line">    <span class="comment">//      empty = empty / 2 + empty % 2;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><p>杨辉三角:<br>1<br>1 1<br>1 2 1<br>1 3 3 1<br>1 4 6 4 1<br>1 5 10 10 5 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">9</span>; k - i; k--) <span class="comment">//这里是为了打印出来效果更像菱形</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="猜凶手"><a href="#猜凶手" class="headerlink" title="猜凶手"></a>猜凶手</h2><p>4个杀人嫌疑犯的供词：<br> A：不是我杀的<br> B：是C杀的<br> C：是D杀的<br> D：C在撒谎<br>已知3个人在说真话，1个人在撒谎，请问凶手是谁？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> killer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (killer = <span class="string">&#x27;A&#x27;</span>; killer &lt;= <span class="string">&#x27;D&#x27;</span>; killer++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((killer != <span class="string">&#x27;A&#x27;</span>) + (killer == <span class="string">&#x27;C&#x27;</span>) + (killer == <span class="string">&#x27;D&#x27;</span>) + (killer != <span class="string">&#x27;D&#x27;</span>) == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, killer);<span class="comment">//每个表达式成立的话，得1，全部加起来为3的话，3个表达式成立</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="比赛预测"><a href="#比赛预测" class="headerlink" title="比赛预测"></a>比赛预测</h2><p>5名运动员比赛前进行预测：<br> A：B第二，我第三<br> B：我第二，E第四<br> C：我第一，D第二<br> D：C最后，我第三<br> E：我第四，A第一<br>比赛结束后，每个选手说对了一半，请确定每个选手的排名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//每个选手的排名都可能是1~5之间</span></span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= <span class="number">5</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">5</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (d = <span class="number">1</span>; d &lt;= <span class="number">5</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (e = <span class="number">1</span>; e &lt;= <span class="number">5</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (</span><br><span class="line">                             (b == <span class="number">2</span>) + (a == <span class="number">3</span>) == <span class="number">1</span></span><br><span class="line">                             &amp;&amp; (b == <span class="number">2</span>) + (e == <span class="number">4</span>) == <span class="number">1</span></span><br><span class="line">                             &amp;&amp; (c == <span class="number">1</span>) + (d == <span class="number">2</span>) == <span class="number">1</span></span><br><span class="line">                             &amp;&amp; (c == <span class="number">5</span>) + (d == <span class="number">3</span>) == <span class="number">1</span></span><br><span class="line">                             &amp;&amp; (e == <span class="number">4</span>) + (a == <span class="number">1</span>) == <span class="number">1</span></span><br><span class="line">                             ) <span class="comment">//每个判断条件正确为1，错误为0，每个人只猜对一半的话，两个表达式相加等于1</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((a * b * c * d * e) == <span class="number">120</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d c=%d d=%d e=%d\n&quot;</span>, a, b, c, d, e);</span><br><span class="line">                                <span class="comment">//结果为：a=3 b=1 c=5 d=2 e=4</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += flag * <span class="number">1.0</span> / i; <span class="comment">//让每隔一次循环从 + 变 - ，再从 - 变 + </span></span><br><span class="line">        flag = -flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="关机小程序"><a href="#关机小程序" class="headerlink" title="关机小程序"></a>关机小程序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span>   <span class="comment">//system()的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>   <span class="comment">//strcmp()的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> input[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//shutdown -s -t 60    电脑在1分钟后关机     shutdown -a  取消关机</span></span><br><span class="line">    <span class="comment">//cmd - command - 命令行</span></span><br><span class="line">    <span class="comment">//system() - 执行系统命令的函数 </span></span><br><span class="line">    system(<span class="string">&quot;shutdown -s -t 60&quot;</span>);</span><br><span class="line">again:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请注意，你的电脑在1分钟后关机，如果输入：我是猪，就取消关机\n请输入&gt;:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(input, <span class="string">&quot;我是猪&quot;</span>) == <span class="number">0</span>)<span class="comment">//比较两个字符串 - strcmp() 比较字符串的函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> again;   <span class="comment">//可以用while循环代替，尽量不用goto</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>goto语句 （尽量不要用）</p>
<ul>
<li>goto语句可以往前面或者后面跳，打乱程序的循序结构，容易进入死循环。不是必须时，不建议使用。</li>
</ul>
<p>适合用goto语句的场合：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(...)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">for</span>(....)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(disaster)</span><br><span class="line">                <span class="keyword">goto</span> error;    <span class="comment">//发生错误后，直接跳出到指定位置</span></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">error:</span><br><span class="line">     <span class="keyword">if</span>(disaster)</span><br><span class="line">  <span class="comment">//处理错误情况  </span></span><br></pre></td></tr></table></figure>
<br>

<p>本章节完，感谢阅览！  请持续关注我的更新~   </p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的初次见面-上</title>
    <url>/zh-CN/2022/11/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2-%E4%B8%8A/</url>
    <content><![CDATA[<p> <strong>关于本文章</strong>，是我第一次接触C的时候，大概了解到的一个框架。比如，本文中的循环只简单介绍了while。这里是文章的上半部分，后面我会更新发布专门针对各种各样关于不同语法细节的文章。感兴趣的话，请持续关注我的更新~  </p>
<p><strong>目录 &gt;</strong></p>
<ul>
<li>我的第一个C代码</li>
<li>数据类型</li>
<li>实用的函数printf()的形式</li>
<li>计算机中的单位</li>
<li>变量和常量<ul>
<li>计算两个数值的和</li>
<li>变量的作用域</li>
<li>变量的生命周期</li>
<li>常量（字面常量）（const修饰的常变量）</li>
<li>常量（#define定义的标识符常量）</li>
<li>常量（枚举常量）</li>
</ul>
</li>
<li>字符串<ul>
<li>计算字符串长度 strlen();</li>
<li>转义字符<ul>
<li>‘\ddd’ 8进制</li>
<li>‘\xdd’ 16进制</li>
<li>注释</li>
</ul>
</li>
</ul>
</li>
<li>选择语句</li>
<li>循环语句</li>
</ul>
<span id="more"></span>
<br>  


<h1 id="我的第一个C代码"><a href="#我的第一个C代码" class="headerlink" title="我的第一个C代码"></a>我的第一个C代码</h1><ul>
<li>.c文件为 C语言源文件 </li>
<li>.h文件为 头文件</li>
<li>包含一个叫stdio.h的文件</li>
<li>std-标准 standard标准 input输入 output输出</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// int是整型的意思，main前面的int表示main函数调用之后返回整型值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> <span class="comment">// 主函数--&gt;程序入口--&gt;有却只有一个</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  这里做任务,输入函数</span></span><br><span class="line"><span class="comment">  函数-print function - printf - 打印函数</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello 你好\n&quot;</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01001.png" alt="运行结果"><br><br>  </p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">数据类型</th>
<th align="center">大小</th>
</tr>
</thead>
<tbody><tr>
<td align="left">char</td>
<td align="left">字符数据类型</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">短整型</td>
<td align="center">2</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">整型</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">长整型</td>
<td align="center">4 或 8</td>
</tr>
<tr>
<td align="left">long long</td>
<td align="left">更长的整型</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">单精度浮点数</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">双精度浮点数</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p>使用float初始化数据时，在数据后面加上f，编译器默认为double类型，加f让它为float <br><br>字符初始化: ‘w’    字符串初始化: “Name”  -&gt; 注意符号区分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;         <span class="comment">//char--字符类型</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);     <span class="comment">// %c--打印字符格式的数据   \n--换行的意思</span></span><br><span class="line">        <span class="comment">/* %f--打印浮点数字（打小数）</span></span><br><span class="line"><span class="comment">           %p--以地址的形式打印</span></span><br><span class="line"><span class="comment">           %x--打印十六进制数字</span></span><br><span class="line"><span class="comment">           %o....*/</span></span><br><span class="line">        <span class="comment">//short int   //短整型</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">20</span>;           <span class="comment">//整型</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);    <span class="comment">// %d--打印整型十进制数据</span></span><br><span class="line">        <span class="comment">//long 长整型</span></span><br><span class="line">        <span class="type">long</span>  nom = <span class="number">11100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nom);</span><br><span class="line">        </span><br><span class="line">        <span class="type">float</span> f = <span class="number">5.2</span>;     <span class="comment">//单精度浮点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, f);</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> d = <span class="number">3.14</span>;    <span class="comment">//双精度浮点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, d);<span class="comment">//打印双精度浮点数时，用%f可能会丢失精度，所以用%lf更为合适</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sizeof是用来计算括号起来东西的大小</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>)); <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));<span class="comment">//2</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));<span class="comment">// 4/8 C语言标准sizeof(long) &gt;或= sizeof(int) 都行,4=4 8&gt;4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));<span class="comment">//8</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));<span class="comment">//8</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01002.png" alt="运行结果"><br><br>  </p>
<h1 id="实用的函数printf-的形式"><a href="#实用的函数printf-的形式" class="headerlink" title="实用的函数printf()的形式"></a>实用的函数printf()的形式</h1><ol>
<li>类型</li>
<li>标志</li>
<li>输出最小宽度</li>
<li>精度</li>
<li>长度<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d&quot;</span>, x); <span class="comment">//补0凑齐2位 输出：09 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, x); <span class="comment">//补空格，凑齐3位 输出：空格空格9</span></span><br></pre></td></tr></table></figure></li>
</ol>
<table>
<thead>
<tr>
<th align="left"><strong>1) 类型</strong></th>
<th align="left"><strong>类型字符用以表示输出数据的类型，其格式符和意义如下表所示：</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">以十进制形式输出 带符号 整数 (正数不输出符号)  ；补码用%d打印的时候，要算出原码来打印</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">printf(“%8d\n”,100);    printf(“%6d\n”,100);       printf(“%-8d\n”,100);    printf(“%+8\n”,100);</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">输出结果为： └┘└┘└┘└┘└┘100         └┘└┘└┘100   100└┘└┘└┘└┘└┘  └┘└┘└┘└┘└┘100   “-“左对齐 “+”右对齐</td>
</tr>
<tr>
<td align="left">%llu</td>
<td align="left">打印 longlong unsigned 类型 （64位平台打印%d的话）</td>
</tr>
<tr>
<td align="left">%ld</td>
<td align="left">长整型输出</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">以八进制形式输出 无符号 整数 (不输出前缀0)</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">以十六进制数形式输出整数，或输出字符串的地址（只输出数字，如果要输出0x1234这样的形式的话，需要 %#x 用这种形式进行打印）</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">以十进制数输出unsigned型数据(无符号数)。注意：%d与%u有无符号的数值范围，也就是极限的值，不然数值打印出来会有误。</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">输出一个字符</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">输出一个字符串</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">输出实数，以小数形式输出，默认情况下保留小数点6位,如果以 %.2f 这种写法的话，则保留小数点后2位（同理可1~6）c &#x3D; (float)a &#x2F; b;&#x2F;&#x2F;这里强制类型转换，形式结果不省略，会显示小数点后面的数</td>
</tr>
<tr>
<td align="left">%lf</td>
<td align="left">双精度浮点数时，用%f可能会丢失精度，所以用%lf更为合适</td>
</tr>
<tr>
<td align="left">%100f</td>
<td align="left">输出实数，保留小数点100位。</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">数形式输出实数</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">根据大小自动选f格式或e格式，且不输出无意义的零</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">打印地址</td>
</tr>
<tr>
<td align="left"><strong>2) 标志</strong></td>
<td align="left"><strong>标志字符为 -、+、# 和空格四种，其意义下表所示：</strong></td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">结果左对齐，右边填空格</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">输出符号(正号或负号)</td>
</tr>
<tr>
<td align="left">空格</td>
<td align="left">输出值为正时冠以空格，为负时冠以负号</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">对c，s，d，u类无影响；</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">对o类， 在输出时加前缀0；</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">对x类，在输出时加前缀0x；</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">对e,g,f 类当结果有小数时才给出小数点</td>
</tr>
<tr>
<td align="left"><strong>3) 输出最小宽度</strong></td>
<td align="left"><strong>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。</strong></td>
</tr>
<tr>
<td align="left"><strong>4) 精度</strong></td>
<td align="left"><strong>精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。</strong></td>
</tr>
<tr>
<td align="left"><strong>5) 长度</strong></td>
<td align="left"><strong>长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。</strong></td>
</tr>
</tbody></table>
<br>  

<h1 id="计算机中的单位"><a href="#计算机中的单位" class="headerlink" title="计算机中的单位"></a>计算机中的单位</h1><ul>
<li><p>2字节 — 16比特位 2^16-1  </p>
<ul>
<li>4字节 — 32比特位 2^32-1</li>
</ul>
</li>
<li><p>bit — 比特位  最小，1个比特位只能装1个 1或0  </p>
</li>
<li><p>byte — 字节   1个字节 &#x3D; 8个比特位的大小。  </p>
<ul>
<li>kb — 1024个byte  </li>
<li>mb — 1024个kb  </li>
<li>gb — 1024个mb  </li>
<li>tb  — 1024个gb   </li>
<li>正电 —  1    </li>
<li>负电 — 0</li>
</ul>
</li>
<li><p>二进制：（只有0和1）</p>
</li>
<li><p>10进制：0123456789 日常数字</p>
</li>
<li><p>12进制：时间（12小时一个轮回）</p>
</li>
<li><p>7进制：一周（7天一个轮回）</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">short</span> age = <span class="number">20</span>;<span class="comment">//向内存申请2个字节=16比特位，用来存放20这个数值</span></span><br><span class="line">        <span class="type">float</span> weight = <span class="number">95.6f</span>;<span class="comment">//向内存申请4个字节，存放小数，数值后面加f是指定95.6这个数值是float类型</span></span><br><span class="line">        <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h1><ul>
<li>常量：圆周率、身份证号..不变的值  </li>
<li>变量：年龄、体重..可变的值，C语言中变量有两个不同类型（<em><strong>局部变量，全局变量</strong></em>）</li>
</ul>
<figure class="highlight c"><figcaption><span>变量</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> num1 = <span class="number">20</span>;<span class="comment">//全局变量-定义在代码块&#123;&#125;之外的变量</span></span><br><span class="line"><span class="type">int</span> num2; <span class="comment">//一个全局变量不给初始化的话,默认会被初始化为0;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">10</span>;<span class="comment">//局部变量-定义在代码块&#123;&#125;内部的变量 ;名字相同的话，把这行去掉就直接显示全局</span></span><br><span class="line">        <span class="type">int</span> a; <span class="comment">//一个局部变量不给初始化的话,默认是随机值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num1);<span class="comment">//局部和全局变量的名字尽量不要相同，容易误会出bug；</span></span><br><span class="line">                         <span class="comment">//当局部和全局变量名字相同时，局部优先显示。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01003.png" alt="运行结果"><br><br>  </p>
<h2 id="计算两个数值的和"><a href="#计算两个数值的和" class="headerlink" title="计算两个数值的和"></a>计算两个数值的和</h2><ul>
<li>关于scanf函数报错</li>
<li>在项目最开头处加上：#define _CRT_SECURE_NO_WARNINGS 1<br><img src="/zh-CN/images/c/c01004.png" alt="运行结果"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;   <span class="comment">//C语言语法规定，变量要定义在当前代码块的最前面</span></span><br><span class="line">        <span class="comment">/*输入数据-使用输入函数scanf</span></span><br><span class="line"><span class="comment">        vs2019中加(_s)</span></span><br><span class="line"><span class="comment">        scanf_s() 的功能虽然与scanf() 相同，但却比 scanf() 安全，</span></span><br><span class="line"><span class="comment">        因为 scanf_s() 是针对“ scanf()在读取字符串时不检查边界，可能会造成内存泄露”这个问题设计的。</span></span><br><span class="line"><span class="comment">        scanf_s()用于读取字符串时，必须提供一个数字以表明最多读取多少位字符，以防止溢出。</span></span><br><span class="line"><span class="comment">        【scanf_s()】这个只能用于vs，其他软件不兼容，缺乏跨平台性，所以尽量不用，</span></span><br><span class="line"><span class="comment">        在源文件最前面加上#define _CRT_SECURE_NO_WARNINGS 1   这样就可以让编译器不报错*/</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);<span class="comment">//取地址符号&amp;   scanf输入的值太大的话，还是会硬塞入内存中，导致溢出</span></span><br><span class="line">        sum = num1 + num2;       <span class="comment">//scanf不会关心目标空间到底放不放得下</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);<span class="comment">//%d前面的（sum=）会在调试中显示出来</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
while(scanf(“%d”,&amp;a) &#x3D;&#x3D; 1) &#x2F;&#x2F;scanf成功读取到输入信息时,返回值为1 ;如果无法读取输入信息时,返回值为EOF  EOF值为-1<br>while(scanf(“%d”,&amp;a) !&#x3D; EOF) 退出程序按 ctrl + z<br></li>
</ul>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> global = <span class="number">2020</span>;<span class="comment">//全局变量的作用域是整个工程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;test()--%d\n&quot;</span>, global);<span class="comment">//这里不运行，只是声明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="type">int</span> num = <span class="number">0</span>;  <span class="comment">//局部变量的作用域是，局部变量坐在的&#123;&#125;里面才起作用，</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);<span class="comment">//如果把printf(&quot;num=%d\n&quot;, num);移到变量int num = 0;的&#123;&#125;以外，不起作用</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;global=%d\n&quot;</span>, global);</span><br><span class="line">        test();<span class="comment">//在main里调用了void函数，所以会执行</span></span><br><span class="line">        <span class="comment">//在同一个工程中，不同的源文件里有一个全局变数int g_val = 2021;</span></span><br><span class="line">        <span class="comment">//声明 extern外部符号的(其他源文件里的全局变数)     </span></span><br><span class="line">        <span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;g_val=%d\n&quot;</span>, g_val);  <span class="comment">//这时就会显示g_val = 2021</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h2><p><em>局部变量的生命周期是在{}里面的，而全局变量的生命周期则是整个程序的生命周期</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        &#123;<span class="comment">//生命周期开始</span></span><br><span class="line">               <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);<span class="comment">//ok  </span></span><br><span class="line">        &#125;<span class="comment">//生命周期结束</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);<span class="comment">//error(错误)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="常量（字面常量）（const修饰的常变量）"><a href="#常量（字面常量）（const修饰的常变量）" class="headerlink" title="常量（字面常量）（const修饰的常变量）"></a>常量（字面常量）（const修饰的常变量）</h2><p>const - 常属性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//const-常属性，</span></span><br><span class="line">        <span class="comment">//const int n = 10;//n是变量，但是又有常属性，所以我们说n是常变量</span></span><br><span class="line">        <span class="comment">//int arr[10] = &#123; 0 &#125;;//数组[]中必须用常量数值才能运行，不可以用常变量代替</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;<span class="comment">//int num是把num定义为4，属于变量，前面加上const,变成const修饰的常变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">        num = <span class="number">8</span>;<span class="comment">//前面int num=4是变量，可运行。但是加const变成常变量时，num=8就会error</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">        <span class="number">3</span>;<span class="comment">//字面常量</span></span><br><span class="line">        <span class="number">3.14</span>;<span class="comment">//字面常量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="常量（-define定义的标识符常量）"><a href="#常量（-define定义的标识符常量）" class="headerlink" title="常量（#define定义的标识符常量）"></a>常量（#define定义的标识符常量）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">              <span class="comment">//#define 定义的标识符常量 (define宏定义）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10 <span class="comment">//定义一个常量叫MAX的符号，后面10是定义为10的意思</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> arr[MAX] = &#123;<span class="number">0</span>&#125;;<span class="comment">//用定义符定义的常量，可以在数组[]中使用</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MAX); <span class="comment">// 输出10</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h2 id="常量（枚举常量）"><a href="#常量（枚举常量）" class="headerlink" title="常量（枚举常量）"></a>常量（枚举常量）</h2><figure class="highlight c"><figcaption><span>（例1：）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举常量</span></span><br><span class="line"><span class="comment">//枚举-一一列举（性别：男，女，保密。三原色：红，黄，蓝。）</span></span><br><span class="line"><span class="comment">//枚举关键字 - enum</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>           //性别,英文：男，女，保密</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        MALE,</span><br><span class="line">        FEMALE,</span><br><span class="line">        SECRET</span><br><span class="line">&#125;;               <span class="comment">//MALE,FEMALE,SECRET这3个值-枚举常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//enum Sex s = MALE;//名叫s的人是男的</span></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;<span class="comment">//枚举取值只能取设定好的值:只能是MALE,FEMALE,SECRET其中一个</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MALE);<span class="comment">//枚举常量是有值的，且默认顺序为0，1，2...并且不可被改变</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FEMALE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SECRET);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01005.png" alt="运行结果"></p>
<figure class="highlight c"><figcaption><span>（例2：）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span>  //颜色，红黄蓝</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        RED,</span><br><span class="line">        YELLOW,</span><br><span class="line">        BLUE</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">color</span> =</span> BLUE;<span class="comment">//名称为color的颜色为蓝色BLUE</span></span><br><span class="line">        color = YELLOW;<span class="comment">//这个color只是某物品名称，是变量，可以被改</span></span><br><span class="line">        <span class="comment">//BLUE = 6;//这个是枚举定义的常量，必须按默认0，1，2...颜色本身不能被改，所以error</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串 — 由””括起来的字符<br>‘\0’ — 转义字符 — 0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>                  <span class="comment">// 0-数字0</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                        <span class="comment">// &#x27;0&#x27;--&gt;字符0，ASCII值：48</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;<span class="comment">//数组</span></span><br><span class="line">        <span class="comment">//&quot;abc&quot;相当于&#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27;&#x27;\0&#x27;------&#x27;\0&#x27;字符串结束标志</span></span><br><span class="line">        <span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;只有&#x27;a&#x27;&#x27;b&#x27;&#x27;c&#x27;,没有结束标志。所以用&#123;&#125;打字符串时，要加入&#x27;\0&#x27;或者0，代表字符结束。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);<span class="comment">//打印字符串用%s</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);<span class="comment">//没有遇到\0的话,会一直往后面读取,导致报错</span></span><br><span class="line">        <span class="string">&quot;hello bit&quot;</span>;</span><br><span class="line">        <span class="string">&quot;&quot;</span>;<span class="comment">//空字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数据在计算机上存储的时候，存储的是2进制</span></span><br><span class="line">        <span class="comment">//每个字符都有它们对应的值#aA$hud...   比如：a-97 A-65 \0-0 ...</span></span><br><span class="line">        <span class="comment">//ASCII 编码，每个字符都有ASCII码</span></span><br><span class="line">        <span class="comment">//ASCII 码值，每个ASCII码对应的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01006.png" alt="运行结果"><br><br>  </p>
<h2 id="计算字符串长度-strlen"><a href="#计算字符串长度-strlen" class="headerlink" title="计算字符串长度 strlen();"></a>计算字符串长度 strlen();</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//strlen函数的头文件（计算长度的头文件）</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;<span class="comment">//长度：3</span></span><br><span class="line">        <span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;<span class="comment">//长度：不加\0，结果为随机值；加上&#x27;\0&#x27;后，长度为3。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr1));<span class="comment">//strlen - string length - 用来计算字符串长度的</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01007.png" alt="运行结果"></p>
<ul>
<li>这里的\0是转义字符，转义字符的意思是-在字符前面加上’&#39;，从而改变字符原有的意思。  </li>
<li>比如：’\n’-从字面’n’变为’换行’的意思，<ul>
<li>‘\t’ –&gt; ‘水平制表符’，</li>
<li>‘\r’ –&gt; ‘回车’…..</li>
</ul>
</li>
</ul>
<p><em><strong>(详细请看下面转义字符规律图表)</strong></em><br><br>  </p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th align="left">转义字符</th>
<th align="left">意义</th>
<th align="left">ASCII码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\a</td>
<td align="left">响铃(BEL),警告字符</td>
<td align="left">007</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格(BS) ，将当前位置移到前一列</td>
<td align="left">008</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页(FF)，将当前位置移到下页开头</td>
<td align="left">012</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行(LF) ，将当前位置移到下一行开头</td>
<td align="left">010</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车(CR) ，将当前位置移到本行开头</td>
<td align="left">013</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平制表(HT) （跳到下一个TAB位置）</td>
<td align="left">009</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表(VT)</td>
<td align="left">011</td>
</tr>
<tr>
<td align="left">\\</td>
<td align="left">代表一个反斜线字符’’&#39;</td>
<td align="left">092</td>
</tr>
<tr>
<td align="left">\‘</td>
<td align="left">代表一个单引号（撇号）字符</td>
<td align="left">039</td>
</tr>
<tr>
<td align="left">\“</td>
<td align="left">代表一个双引号字符</td>
<td align="left">034</td>
</tr>
<tr>
<td align="left">\?</td>
<td align="left">代表一个问号, 防止识别为三字母词(are you ok??)&#x3D;&gt;(are you ok]   ??) &#x3D;&gt; ]</td>
<td align="left">063</td>
</tr>
<tr>
<td align="left">\0</td>
<td align="left">空字符(NUL)</td>
<td align="left">000</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">ddd表示1~3个八进制的数字</td>
<td align="left">三位八进制</td>
</tr>
<tr>
<td align="left">\xdd</td>
<td align="left">dd表示2个十六进制数字</td>
<td align="left">十六进制</td>
</tr>
</tbody></table>
<figure class="highlight c"><figcaption><span>例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;c:\\2013\\music\\zhou.mp3&quot;</span>);<span class="comment">//为防止系统把&#x27;\&#x27;理解为转义字符，把&#x27;\&#x27;写作&#x27;\\&#x27;</span></span><br><span class="line">        <span class="comment">//这时得到的结果是c:\2013\music\zhou.mp3这样的地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>);<span class="comment">//同理：&#x27;--&gt;\&#x27;  才能打出符号&#x27;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);<span class="comment">//字符串也是同理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="‘-ddd’-8进制"><a href="#‘-ddd’-8进制" class="headerlink" title="‘\ddd’ 8进制"></a>‘\ddd’ 8进制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>  <span class="comment">//计算长度的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;c:\test\32\test.c&quot;</span>));<span class="comment">//长度为13，但是为什么是13呢  \t算一个字符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\32&#x27;</span>);<span class="comment">//显示&quot;→&quot;</span></span><br><span class="line">        <span class="comment">//\32 -- 32是2个8进制数字 （不能出现8，9这种超过7的数值）  3*8^1+2*8^0 = 24+2 =26   26在ASCII码中是&#x27;→&#x27;</span></span><br><span class="line">        <span class="comment">//32作为8进制--&gt;10进制数字，10进制--&gt;ASCII码值对应的字符</span></span><br><span class="line">        <span class="comment">//32--&gt;10进制 26-&gt;作为ASCII码值代表的字符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\132&#x27;</span>);<span class="comment">//显示&#x27;Z&#x27;</span></span><br><span class="line">                           <span class="comment">//  八进制算法：\132 --  1*8^2+3*8^1+2*8^0 = 64+24+2 = 90 --&gt; ASCII码值为：&#x27;Z&#x27;</span></span><br><span class="line">        <span class="comment">//所以\32是一个字符&#x27;→&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="‘-xdd’-16进制"><a href="#‘-xdd’-16进制" class="headerlink" title="‘\xdd’ 16进制"></a>‘\xdd’ 16进制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>            <span class="comment">// &#x27;\&#x27;后面的只是数字：8进制；如果是&#x27;\x&#x27;加数字：16进制。</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\x61&#x27;</span>);<span class="comment">//十六进制算法：\x61 -- 6*16^1+1*16^0 = 96+1= 97 --&gt; ASCII码值为：&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//把16进制换成10进制,然后对应相对应的ASCII码值.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>C语言风格：&#x2F;*xxxxxxxx*&#x2F;   <ul>
<li>缺点：不支持嵌套(&#x2F;*xxxx&#x2F;*xx*&#x2F;xxxx*&#x2F;)后面一部分不被注释</li>
</ul>
</li>
<li>C++风格：&#x2F;&#x2F;xxxxxxxxxx   <ul>
<li>可以注释一行也可以注释多行（推荐用这种）<br></li>
</ul>
</li>
</ul>
<h1 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;在大学里\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你要好好学习吗？请输入(1,0)&gt;:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);     <span class="comment">//输入函数，选择输入1/0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == input)        <span class="comment">//if-如果    一个&#x27; = &#x27;表示赋值，两个&#x27; = &#x27;表示判断是否相等。</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;好offer\n&quot;</span>);</span><br><span class="line">        <span class="comment">//else                   //else-其他</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == input)   <span class="comment">//这种也可以用</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;卖红薯\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><ol>
<li>while语句</li>
<li>for语句</li>
<li>do…while语句<figure class="highlight c"><figcaption><span>while例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;在大学里\n&quot;</span>);</span><br><span class="line">        <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (line &lt; <span class="number">20000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;敲一行代码:%d\n&quot;</span>,line);</span><br><span class="line">                       line++;   <span class="comment">//使变量的值增加1  同理&#x27;--&#x27;使值减1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (line &gt;= <span class="number">20000</span>)         <span class="comment">//一直循环，直到&gt;或=20000</span></span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;好offer\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ol>
<p>（本篇未完，请继续浏览《C语言的初次见面-下》）</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的初次见面-下</title>
    <url>/zh-CN/2022/11/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2-%E4%B8%8B/</url>
    <content><![CDATA[<p> <strong>关于本文章</strong>，是我第一次接触C的时候，大概了解到的一个框架。这里是文章的下半部分，后面我会更新发布专门针对各种各样关于语法细节的文章。感兴趣的话，请持续关注我的更新~<br><strong>目录 &gt;</strong></p>
<ul>
<li>函数</li>
<li>数组</li>
<li>操作符<ul>
<li>算术操作符： + - * &#x2F; %</li>
<li>移位操作符: &gt;&gt; &lt;&lt;</li>
<li>位操作符：&amp;按位与、|按位或、^按位异或</li>
<li>赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;</li>
<li>单目操作符:  !  +  -  sizeof  ~  ++  –  &amp;  *  (类型)</li>
<li>关系操作符:  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;  !&#x3D;  &#x3D;&#x3D;</li>
<li>逻辑操作符</li>
<li>条件操作符（三目操作符）</li>
<li>逗号表达式</li>
<li>下标引用、函数调用和结构成员</li>
</ul>
</li>
<li>常见关键字</li>
<li>指针</li>
<li>结构体</li>
</ul>
<span id="more"></span>
<br>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight c"><figcaption><span>函数例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>       <span class="comment">//printf、scanf这些是库函数，C语言库自带的</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  <span class="comment">//int add 这种是自定义函数，自己设计的</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> z = (x + y);  <span class="comment">//设计的计算公式（自己设计，加减乘除都行）</span></span><br><span class="line">        <span class="keyword">return</span> z;      <span class="comment">//这里计算结果会返回到下面的sum里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> num2 = <span class="number">200</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">6</span>;</span><br><span class="line">        sum = add(num1, num2);<span class="comment">//得出结果300</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">        sum = add(a, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);<span class="comment">//得出结果11</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>  

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">             <span class="comment">//定义一个存放10个整型数字的数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;<span class="comment">//下标从0开始，比如[n]的下标=n-1</span></span><br><span class="line">        <span class="comment">//0~9 </span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">10</span>)    </span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">               i++;                  <span class="comment">//用循环语句再加上++，从而打出1~10的全部数值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">4</span>]);<span class="comment">//用下标的形式访问元素  arr[下标]；</span></span><br><span class="line">        <span class="type">char</span> ch[<span class="number">20</span>];<span class="comment">//存放字符</span></span><br><span class="line">        <span class="type">float</span> arr2[<span class="number">5</span>];<span class="comment">//存放浮点数字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/zh-CN/images/c/c01008.png" alt="运行结果"><br><br> </p>
<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><ol>
<li>算术操作符： + - * &#x2F; %</li>
<li>移位操作符: &gt;&gt; &lt;&lt;</li>
<li>位操作符：&amp;按位与、|按位或、^按位异或</li>
<li>赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;</li>
<li>单目操作符: ! + - sizeof ~ ++ – &amp; * (类型)</li>
<li>关系操作符: &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; &#x3D;&#x3D;</li>
<li>逻辑操作符</li>
<li>条件操作符（三目操作符）</li>
<li>逗号表达式<br></li>
</ol>
<h2 id="算术操作符：-x2F"><a href="#算术操作符：-x2F" class="headerlink" title="算术操作符： + - * &#x2F; %"></a>算术操作符： + - * &#x2F; %</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 5/2=2余数为1: 5/2--&gt;2  5%2--&gt;1 </span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">5</span> % <span class="number">2</span>;<span class="comment">// %用于取模(余数)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="移位操作符-gt-gt-lt-lt"><a href="#移位操作符-gt-gt-lt-lt" class="headerlink" title="移位操作符: &gt;&gt; &lt;&lt;"></a>移位操作符: &gt;&gt; &lt;&lt;</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//移（2进制）位操作符</span></span><br><span class="line">        <span class="comment">// &lt;&lt;左移   &gt;&gt;右移</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//整型1占4个字节-32bit位</span></span><br><span class="line">        <span class="comment">//00000000000000000000000000000001</span></span><br><span class="line">        <span class="type">int</span> b = a &lt;&lt; <span class="number">3</span>;<span class="comment">//a左移3个bit位等于b</span></span><br><span class="line">                    <span class="comment">//b=00000000000000000000000000001000</span></span><br><span class="line">                          <span class="comment">//计算公式: 1*2^3 + 0*2^2 + 0*2^1 + 0*2^0 = 8+0+0+0 = 8</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//得出b=8</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="位操作符：-amp-按位与、-按位或、-按位异或"><a href="#位操作符：-amp-按位与、-按位或、-按位异或" class="headerlink" title="位操作符：&amp;按位与、|按位或、^按位异或"></a>位操作符：&amp;按位与、|按位或、^按位异或</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//（2进制）位操作    二进制： ...   1       1      1       1</span></span><br><span class="line">        <span class="comment">// &amp; 按位与                ...  1*2^3   1*2^3   1*2^3   1*2^3</span></span><br><span class="line">        <span class="comment">// | 按位或                ...    8       4      2       1</span></span><br><span class="line">        <span class="comment">// ^ 按位异或</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">3</span>; <span class="comment">//011--&gt; 1*2^1 + 1*2^0 = 2+1 = 3----2+1----0011</span></span><br><span class="line">        <span class="type">int</span> b = <span class="number">5</span>; <span class="comment">//5-----4+1-----0101   例： 13-----8+4+1----1101</span></span><br><span class="line">        <span class="type">int</span> c = a &amp; b;<span class="comment">//得1</span></span><br><span class="line">        <span class="comment">// &amp;  011   0+1-0 ，1+1-1  必须两个1才得1</span></span><br><span class="line">        <span class="comment">//    101</span></span><br><span class="line">        <span class="comment">//得出 001</span></span><br><span class="line">        <span class="type">int</span> c = a | b;<span class="comment">//得7</span></span><br><span class="line">        <span class="comment">// |  011   0+1-1 ，1+1-1  只要有一个1就得1</span></span><br><span class="line">        <span class="comment">//    101</span></span><br><span class="line">        <span class="comment">//得出 111</span></span><br><span class="line">        <span class="type">int</span> c = a ^ b;<span class="comment">//得6</span></span><br><span class="line">        <span class="comment">//异或的计算规律：对应的二进制位相同，则为0; 对应的二进制位相异，则为1。</span></span><br><span class="line">        <span class="comment">// ^  011</span></span><br><span class="line">        <span class="comment">//    101</span></span><br><span class="line">        <span class="comment">//得出 110</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="赋值操作符：-x3D-x3D-x3D-x3D-x2F-x3D-amp-x3D-x3D-x3D-gt-gt-x3D-lt-lt-x3D"><a href="#赋值操作符：-x3D-x3D-x3D-x3D-x2F-x3D-amp-x3D-x3D-x3D-gt-gt-x3D-lt-lt-x3D" class="headerlink" title="赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;"></a>赋值操作符： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        a = <span class="number">20</span>;<span class="comment">// &#x27;=&#x27; 赋值     &#x27;==&#x27; 判断相等</span></span><br><span class="line">        a = a + <span class="number">10</span>;<span class="comment">//方式1</span></span><br><span class="line">        a += <span class="number">10</span>;   <span class="comment">//方式2    方式1和2，完全相等</span></span><br><span class="line">        <span class="comment">//例</span></span><br><span class="line">        a = a - <span class="number">20</span>;</span><br><span class="line">        a -= <span class="number">20</span>;</span><br><span class="line">        a = a &amp; <span class="number">2</span>;</span><br><span class="line">        a &amp;= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复合赋值符</span></span><br><span class="line">        <span class="comment">//+= -= *= %= &gt;&gt;= &lt;&lt;= &amp;= |= ^=</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="单目操作符-sizeof-–-amp-类型"><a href="#单目操作符-sizeof-–-amp-类型" class="headerlink" title="单目操作符:  !  +  -  sizeof  ~  ++  –  &amp;  *  (类型)"></a>单目操作符:  !  +  -  sizeof  ~  ++  –  &amp;  *  (类型)</h2><ol>
<li>单目操作符  （一个操作数）</li>
<li>双目操作符  （两个操作数）</li>
<li>三目操作符   (三个操作数)</li>
</ol>
<ul>
<li>! 反逻辑操作符  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C语言中表示我们表示真假</span></span><br><span class="line">     <span class="comment">//  0-假    非0-真</span></span><br><span class="line">     <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//正常逻辑a=10为真</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !a);<span class="comment">//前面加&#x27;！&#x27;逻辑反逻辑，&#x27;!a&#x27;为0，是假。</span></span><br><span class="line">     </span><br><span class="line">     !的应用场景:</span><br><span class="line">     <span class="keyword">if</span>(a)</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">     <span class="keyword">if</span>(!a)</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//如果&#x27;a&#x27;=&#x27;0&#x27;，则&#x27;!a&#x27;为&#x27;1&#x27;。</span></span><br></pre></td></tr></table></figure></li>
<li>+ 正值 、 - 负值  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;<span class="comment">//    2</span></span><br><span class="line"><span class="type">int</span> b = -a;<span class="comment">//   -2     给a取负</span></span><br><span class="line"><span class="type">int</span> c = +b;<span class="comment">//   -2     +正号都会省略</span></span><br></pre></td></tr></table></figure></li>
<li>sizeof 操作数的类型长度（以字节为单位）  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">//sizeof 计算的是 变量或类型 所占空间的大小，单位是字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));   <span class="comment">//4  几个方式都一样</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//4</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span> a);   <span class="comment">//4  a的()可以省略</span></span><br><span class="line">  <span class="comment">//printf(&quot;%d\n&quot;, sizeof int);//error int的&#x27;()&#x27;不可省略，所以是error</span></span><br><span class="line"></span><br><span class="line">———————————————————————————————————————————————————————————————————————————</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//10个整型元素的数组</span></span><br><span class="line">                                       <span class="comment">//10*sizeof(int) = 40</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span> arr);<span class="comment">//40</span></span><br><span class="line">                              <span class="comment">//计算数组的元素个数</span></span><br><span class="line">                             <span class="comment">// 个数 = 数组总大小 / 每个元素的大小</span></span><br><span class="line">  <span class="type">int</span> sz = <span class="number">0</span>;</span><br><span class="line">  sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sz=%d\n&quot;</span>, sz);<span class="comment">//10</span></span><br></pre></td></tr></table></figure>
  EOF - end of file - 文件结束标志&#x3D; -1      #define EOF -1</li>
</ul>
  <figure class="highlight c"><figcaption><span>练习题</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  <span class="comment">//自定义函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">         <span class="keyword">return</span> x;   <span class="comment">//如果x&gt;y，显示x</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> y;   <span class="comment">//其他显示y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">0</span>;    </span><br><span class="line">  c = max(a, b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);<span class="comment">//得20，显示b的值</span></span><br><span class="line">————————————————————————————————————————————————————————————————————</span><br><span class="line">  <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;<span class="comment">// 6*4=24   （1个int，4个字节--&gt;6个数，6个int）</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//计算数组大小，单位是字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])); <span class="comment">//arr的总大小除于（arr[0]）一个元素的大小= 元素个数--&gt;6</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>~ 对一个数的二进制按位取反  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">int</span> a = <span class="number">0</span>;<span class="comment">//4个字节，32个bit位---&gt;00000000000000000000000000000000(32个)</span></span><br><span class="line">      <span class="type">int</span> b = ~a; <span class="comment">// ~ 按（二进制）位取反 例：1010 --&gt;0101 （1和0互相改变）     b是有符号的整型</span></span><br><span class="line">      <span class="comment">//按位取反后变成32个 1，b=32个1</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">// -1    因为b是有符号的整型，所以第一位数是符号位，当它是1时变负号（-）</span></span><br><span class="line">          <span class="comment">//计算机存储负数时，用的是 补码，   但是使用时，打印的是这个数的原码。</span></span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<u> 原码、反码、补码 </u><br>负数在内存中存储的时候，存储的是二进制的 补码<br> 原码 -&gt; 反码 -&gt; 补码  的过程：<br>   原码-&gt; 符号位不变，其他位置按位取反 –&gt; 反码<br>   反码-&gt; 加一（+1）–&gt; 补码<br>   反过来就是：补码-1 再 按位取反 &#x3D; 原码<br>   所以       11111111111111111111111111111111<br>              11111111111111111111111111111110<br>   符号位不变  10000000000000000000000000000001<br>   符号位1&#x3D;负号 0000000000000000000000000000001&#x3D;1  所以得出b&#x3D; -1</li>
</ul>
<p>只要是整数，内存中存储的都是二进制的补码<br>正数–原码，反码，补码  相同<br>负数–&gt;补码<br><em><strong>原码</strong></em>是：直接按照正负写出的二进制序列       -2   100000000000000000000010  -2的原码<br><em><strong>反码</strong></em>是：原码的符号位不变，其他位置按位取反      111111111111111111111101   -2的反码<br><em><strong>补码</strong></em>是：反码+1                                 111111111111111111111110   -2的补码</p>
<ul>
<li><p>++ --    前置 或 后置 ++ --</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">//int b = a++;//后置++，先使用(b变a)，再++(a再+1)</span></span><br><span class="line">      <span class="type">int</span> b = ++a;<span class="comment">//前置++，先++（a+1），再使用</span></span><br><span class="line">      <span class="comment">//int b = a--;//a=9,b=10</span></span><br><span class="line">      <span class="comment">//int b = --a;//a=9,b=9</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>, a, b);<span class="comment">//后置++：a=11,b=10； 前置++：a=11，b=11。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>&amp;  取地址</p>
</li>
<li><p>*  间接访问操作符（解引用操作符）</p>
</li>
<li><p>（类型）  强制类型转换     ‘（）里面放个类型’</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//原来3.14是double类型的，（）里面填类型，强制类型转换，让3.14强制变int类型</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h2 id="关系操作符-gt-gt-x3D-lt-lt-x3D-x3D-x3D-x3D"><a href="#关系操作符-gt-gt-x3D-lt-lt-x3D-x3D-x3D-x3D" class="headerlink" title="关系操作符:  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;  !&#x3D;  &#x3D;&#x3D;"></a>关系操作符:  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;  !&#x3D;  &#x3D;&#x3D;</h2><ul>
<li>&gt;   大于</li>
<li>&gt;&#x3D;  大于等于</li>
<li>&lt;   小于</li>
<li>&lt;&#x3D;  小于等于</li>
<li>!&#x3D;  不等于 — 用于测试‘不等于’</li>
<li>&#x3D;&#x3D;  判断相等 — 用于测试‘相等’ — 一个&#x3D;是赋值操作符<br></li>
</ul>
<h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>&amp;&amp;   逻辑与<br>||  逻辑或  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 假--0   真--非0</span></span><br><span class="line">        <span class="comment">// &amp;&amp; - 逻辑与</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> c = a &amp;&amp; b;<span class="comment">//左边a为真，右边b也为真，所以c也为真（只要a或b其中一个为假（0），那么c也为假（0））</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);<span class="comment">// c为真--&gt;1   c为假--&gt;0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ||-逻辑或</span></span><br><span class="line">        <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> f = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> g = e || f;<span class="comment">//只要e 或 f其中一个为真，则g为真。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;g=%d\n&quot;</span>, g);<span class="comment">//g=1   e和f都为假（0），g才为假</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="条件操作符（三目操作符）"><a href="#条件操作符（三目操作符）" class="headerlink" title="条件操作符（三目操作符）"></a>条件操作符（三目操作符）</h2><p>exp1 ? exp2 : exp3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//exp1?exp2:exp3;    表达式1为真，结果为表达式2；表达式1为假，则为表达式3。</span></span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">        max = (a &gt; b ? a : b);<span class="comment">//a&gt;b为真，max得a；a&gt;b为假，max则得b。</span></span><br><span class="line">        <span class="comment">//if (a &gt; b)</span></span><br><span class="line">        <span class="comment">//      max = a;  //上面这个三目操作符可以代替if和else来简洁使用</span></span><br><span class="line">        <span class="comment">//else</span></span><br><span class="line">        <span class="comment">//      max = b;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, max);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h2><p>exp1 , exp2 , exp3 , … expN<br>逗号表达式，从左到右依次计算，<br>整个 <em><strong>表达式的结果</strong></em> 是：<em><strong>最后一个表达式的结果</strong></em>。</p>
<figure class="highlight c"><figcaption><span>例：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> d = (a = b - <span class="number">3</span> , b = a * <span class="number">2</span> , c = a - b);<span class="comment">// 0     a b c 的值都会被改变</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);<span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<br> 

<h2 id="下标引用、函数调用和结构成员"><a href="#下标引用、函数调用和结构成员" class="headerlink" title="下标引用、函数调用和结构成员"></a>下标引用、函数调用和结构成员</h2><p>  []  ()  .  -&gt;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">        z = x + y;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//int arr[10] = &#123; 0 &#125;;</span></span><br><span class="line">        <span class="comment">//arr[4];// [] - 下标引用操作符   操作数: arr 和 4</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> sum = Add(a, b);<span class="comment">// () - 函数调用操作符       操作数: 函数名Add 和 函数的参数a  和 函数参数b</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// &amp; * 指针部分文章介绍        </span></span><br><span class="line">        <span class="comment">// . -&gt; 结构体部分文章介绍 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> 自动 <span class="keyword">break</span> 中断 <span class="keyword">case</span>   <span class="type">char</span>字符类型  <span class="type">const</span> 常变量  </span><br><span class="line"><span class="keyword">continue</span> 继续  <span class="keyword">default</span> 默认  <span class="keyword">do</span>   <span class="type">double</span> 类型  <span class="keyword">else</span>  <span class="keyword">enum</span> 枚举</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> 引入(声明)外部符号  <span class="type">float</span>   <span class="keyword">for</span>  <span class="keyword">goto</span>  <span class="keyword">if</span>  <span class="type">int</span>  <span class="type">long</span>  </span><br><span class="line"><span class="keyword">register</span> 寄存器关键字  <span class="keyword">return</span> 返回  <span class="type">short</span>  <span class="type">signed</span> 有符号数  <span class="keyword">sizeof</span>   </span><br><span class="line"></span><br><span class="line"><span class="type">static</span> 静态的  <span class="keyword">struct</span> 结构体关键字  <span class="keyword">switch</span>  <span class="keyword">typedef</span> 类型定义  </span><br><span class="line"><span class="keyword">union</span> 联合体/共用体 <span class="type">unsigned</span> 无符号数  <span class="type">void</span> 无/空  <span class="keyword">volatile</span>   <span class="keyword">while</span> 循环 </span><br></pre></td></tr></table></figure>

<ul>
<li><p>auto int a &#x3D; 10;&#x2F;&#x2F;局部变量都是自动变量，所以int前面默认省略auto</p>
</li>
<li><p>register int a &#x3D; 10;&#x2F;&#x2F;起到一个建议的作用，建议<strong>把a定义成 寄存器变量</strong>，最终是由编译器决定<br><em><strong>寄存器变量不能取地址！！</strong></em></p>
</li>
<li><p>int a &#x3D;10;&#x2F;&#x2F; signed int 只是把signed省略掉了。int 定义的变量是有符号的数<br>a &#x3D; -2;  &#x2F;&#x2F;所以a可以是-2<br>unsigned int b &#x3D; 0;&#x2F;&#x2F;无符号数，这个数字永远是正数</p>
</li>
<li><p>#define是宏定义，仅仅是直接替换,INT_PTR a, b; 进行宏替换后代码是这样的：int *a, b;这里的int *是a的类型，b的类型是int，故此次b只是int类型。<br>而typedef是把该类型定义一个别名，别名是一个独立的类型了，使用这个 类型创建的变量都是这个类型的。</p>
</li>
<li><p><strong>关键字 typedef  (类型定义)-类型重定义</strong><br>typedef unsigned int u_int;&#x2F;&#x2F;给unsigned加个别名，叫：u_int<br>unsigned int num &#x3D; 20;&#x2F;&#x2F;所以用起来一模一样<br>u_int num2 &#x3D; 20;</p>
</li>
<li><p>关键字 static - 静态的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">1.</span> <span class="type">static</span> 修饰局部变量</span><br><span class="line"><span class="comment">//从内存的 栈区 变成 储存到内存的 静态区</span></span><br><span class="line"><span class="comment">//使局部变量的生命周期变长 --&gt; 变成和程序的生命周期一样 但 作用域不变</span></span><br><span class="line"><span class="number">2.</span> <span class="type">static</span> 修饰全局变量       另一个源文件里<span class="type">static</span> <span class="type">int</span> g_val = <span class="number">2020</span>;</span><br><span class="line"><span class="comment">//全局变量是有外部链接属性的   .c文件-&gt;编译-&gt;链接-&gt;可执行文件(exe)</span></span><br><span class="line"><span class="comment">//全局变量原本是外部链接属性,static修饰之后,变成内部链接属性.</span></span><br><span class="line"><span class="comment">//改变了全局变量的作用域    static静态的全局变量只能在自己所在的源文件内部使用，出了源文件就无法再使用了</span></span><br><span class="line"><span class="number">3.</span> <span class="type">static</span> 修饰函数</span><br><span class="line"><span class="comment">//也是改变了函数的作用域-不准确</span></span><br><span class="line"><span class="comment">//static 修饰函数改变了函数的链接属性</span></span><br><span class="line"><span class="comment">//外部链接属性--&gt;内部链接属性   static修饰之后,只能在本源文件内部使用,其他源文件不能使用(修饰函数和修饰全局变量,概念一样)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>;<span class="comment">//a是一个静态的局部变量</span></span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);<span class="comment">//2 3 4 5 6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明外部函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               test();</span><br><span class="line">               i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//extern - 声明外部符号的</span></span><br><span class="line">        <span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;g_val=%d\n&quot;</span>, g_val);<span class="comment">//error  另一个源文件里的全局变量static int g_val出了源文件就无法再使用</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> sum = Add(a, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);<span class="comment">//error 另一个源文件里的Add函数被static了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>#define 定义常量和宏</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#define 定义标识符常量</span></span><br><span class="line"><span class="comment">//#define MAX 100</span></span><br><span class="line"><span class="comment">//#define STR &quot;hehe&quot;</span></span><br><span class="line"><span class="comment">//#define 可以定义宏 - 带参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">               <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//宏的定义方式   宏名字用全大写</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(X,Y) (X&gt;Y?X:Y) <span class="comment">//宏，变成后面的公式   比自定义函数更简洁</span></span></span><br><span class="line"><span class="comment">//#define ADD(x,y) ((x)+(y))   //宏是有参数的,类似函数的感觉   带括号保证兼容性(参数可能会是公式)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//int a = MAX;</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//函数</span></span><br><span class="line">        <span class="type">int</span> max = Max(a, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, max);</span><br><span class="line">        <span class="comment">//宏的方式</span></span><br><span class="line">        max = MAX(a, b);</span><br><span class="line">        <span class="comment">//max=(a&gt;b?a:b);  因为宏的定义，变成这个公式</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, max);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ol>
<li>内存会被划分为小的内存单元，一个内存单元大小是1个字节</li>
<li>每个内存单元都有编号，这个编号被称为：地址&#x2F;指针</li>
<li>地址&#x2F;指针就可以存放在一个变量中，这个变量被称为：指针变量</li>
<li>通过指针变量中存放的地址，就能找到指针指向的空间<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//4个字节</span></span><br><span class="line">        <span class="type">int</span>* p = &amp;a;<span class="comment">//取地址  int* - 指针变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p);</span><br><span class="line">        *p = <span class="number">20</span>;<span class="comment">// * - 解引用操作符 / 间接访问操作符     原本*p这个地址是数值是10，这里的=20是把*p地址的数改成20</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//则int a也变20</span></span><br><span class="line">        <span class="comment">//有一种变量是用来存放地址的 - 指针变量</span></span><br><span class="line">        <span class="comment">//printf(&quot;%p\n&quot;, &amp;a);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>指针的大小<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        <span class="type">char</span>* pc = &amp;ch;<span class="comment">//根据类型不同，指针随之改变  </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(pc));<span class="comment">//4 个字节（32位平台）  如果是8个字节，则64位平台</span></span><br><span class="line">        <span class="comment">//*pc = &#x27;a&#x27;;</span></span><br><span class="line">        <span class="comment">//printf(&quot;%c\n&quot;, ch);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>*));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>*));<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>*));<span class="comment">//4   只要是32位平台，什么类型都是4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>复杂对象 - 结构体 - 我们自己创造出来的一种类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个结构体类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">char</span> name[<span class="number">20</span>];<span class="comment">//C语言程序设计</span></span><br><span class="line">        <span class="type">short</span> price;<span class="comment">//55</span></span><br><span class="line">&#125;;                                 <span class="comment">//;分号不可确少</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//利用结构体类型 - 创建一个改类型的变量</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">b1</span> =</span> &#123; <span class="string">&quot;C语言程序设计&quot;</span>,<span class="number">55</span> &#125;;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, b1.name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;价格：%d元\n&quot;</span>, b1.price);</span><br><span class="line">        b1.price = <span class="number">15</span>;                         <span class="comment">//可以直接修改</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;修改后的价格：%d元\n&quot;</span>, b1.price);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Book</span>* <span class="title">pb</span> =</span> &amp;b1;<span class="comment">//这里定义了一个指针类型struct Book 名叫 pb</span></span><br><span class="line">        <span class="comment">//利用pb打印出我的书名和价格</span></span><br><span class="line">        <span class="comment">//printf(&quot;%s\n&quot;, (*pb).name);//方法1   .结构体变量.成员</span></span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;, (*pb).price);//(*pb)的（）是为了系统不要误会*pb.name是一个指针变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pb-&gt;name);<span class="comment">//方法2   -&gt;结构体指针-&gt;成员</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pb-&gt;price);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串修改（例：修改上面这个书名）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>  <span class="comment">//增加一个string.h头函数</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">b1</span> =</span> &#123; <span class="string">&quot;C语言程序设计&quot;</span>,<span class="number">55</span> &#125;;</span><br><span class="line">        <span class="built_in">strcpy</span>(b1.name, <span class="string">&quot;C++&quot;</span>);<span class="comment">//strcpy - string copy - 字符串拷贝-库函数-string.h</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, b1.name);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br> 

<p>本章节完，感谢阅览！<br>后面我会更新发布专门针对各种各样关于语法细节的文章。<br>感兴趣的话，请持续关注我的更新~   </p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言：函数详解</title>
    <url>/zh-CN/2022/11/27/C%E8%AF%AD%E8%A8%80%EF%BC%9A%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>关于本文章</strong>，介绍C语言中的各种函数语法和函数使用的技巧等，希望能帮助大家更好地了解函数。<br><strong>目录 &gt;</strong></p>
<ul>
<li>函数<ul>
<li>库函数</li>
<li>自定义函数</li>
</ul>
</li>
<li>函数参数</li>
<li>传值调用和传址调用<ul>
<li>传值调用</li>
<li>传址调用</li>
</ul>
</li>
<li>嵌套调用</li>
<li>链式访问</li>
<li>函数的声明和定义<ul>
<li>声明</li>
<li>定义</li>
<li>函数外部分工</li>
</ul>
</li>
<li>函数的递归<ul>
<li>递归求字符串的长度</li>
<li>迭代与递归的区别</li>
</ul>
</li>
</ul>
<span id="more"></span>
<br>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数一般是由一个或者多个代码块组成，主要是以完成某项特定的任务为目的，比如排序函数，其目的就是排序。而且函数与函数之间具有相对独立性。</p>
<p>函数具体分为：</p>
<ol>
<li>库函数</li>
<li>自定义函数<br></li>
</ol>
<h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><p>为什么会有库函数呢？？</p>
<ul>
<li>我在学习C语言的时候，经常会用到很多特定的函数，比如printf打印，这是我们大部分初学者第一次都会接触到的函数。但是，大家有没有想过，为什么会有这个函数的存在？它为什么可以神奇地显示字符到屏幕上呢?<ul>
<li>其实，它是一个库函数。因为在开发过程中，开发者经常要使用一些功能大致相同的函数。如果每次都重新写一个函数，那么太浪费时间了。</li>
<li>所以，衍生出了库函数：把大家经常会用到的函数打包到一个库里面，要用的时候去库里面取就好了。如果实在是有其他特别要求的话，再重新写。这样大大节省了开发者的开发时间，提高了开发效率。</li>
</ul>
</li>
</ul>
<p>如何学习库函数？</p>
<ul>
<li>这里我推荐一个查看库函数的网站：<a href="https://cplusplus.com/">https://cplusplus.com/</a></li>
</ul>
<p><img src="/zh-CN/images/c/c03001.png"> </p>
<p>简单的总结，C语言常用的库函数都有：  </p>
<ul>
<li>IO函数</li>
<li>字符串操作函数</li>
<li>字符操作函数 </li>
<li>内存操作函数 </li>
<li>时间&#x2F;日期函数 </li>
<li>数学函数 </li>
<li>其他库函数</li>
</ul>
<p>我们可以在库函数的网站里，通过头文件进行对函数的查找。</p>
<ul>
<li>如何计算n的k次方这样的运算，可以通过数学头文件进行查找。<br><img src="/zh-CN/images/c/c03002.png"> </li>
<li>然后在头文件包含的函数找到需要的函数。<br><img src="/zh-CN/images/c/c03003.png"></li>
</ul>
<p>函数是由函数名、参数、返回值，三个部分组成。<br><img src="/zh-CN/images/c/c03004.png"> </p>
<p>库函数包含的函数量是非常巨大的，我们只能通过查找进行使用，要全部记下来是非常困难的事情。<br><br></p>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>如果库函数能干所有的事情，那还要程序员干什么？<br><em><strong>比起库函数，自定义函数才是最重要的。</strong></em><br>自定义函数也是和库函数一样，<u>由函数名、参数、返回值，三个部分组成</u>。<br>但是自定义函数的自由度更高，可以根据不同的需求，设计不同的函数，让程序员可以有很大的发挥空间。</p>
<p>自定义函数例：</p>
<ul>
<li>写一个函数可以找出两个整数中的最大值。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (x &gt; y) ? (x) : (y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">  <span class="type">int</span> max = get_max(num1, num2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><ul>
<li><p><strong>实际参数</strong>（实参）：<br>真实传给函数的参数，叫实参。<br>实参可以是：常量、变量、表达式、函数等。<br>无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形<br>参。</p>
</li>
<li><p><strong>形式参数</strong>（形参）：<br>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配内<br>存单元），所以叫形式参数。形式参数当函数调用完成之后就<em><strong>自动销毁</strong></em>了。因此形式参数只在函数中有效。</p>
</li>
</ul>
<p><img src="/zh-CN/images/c/c03005.png"> </p>
<p>上面这两个自定义函数Add1和Add2，分别调用之后，参数会发生什么样的变化呢？<br><img src="/zh-CN/images/c/c03006.png">  </p>
<p>代码对应的内存分配如下：<br><img src="/zh-CN/images/c/c03007.png">   </p>
<p>所以我们可以简单的认为：<strong>形参实例化之后其实相当于实参的一份临时拷贝</strong>。</p>
<br>

<p>写一个函数,实现整型有序数组的二分查找:</p>
<figure class="highlight c"><figcaption><span>通过自定义函数，把二分查找从main函数中分离出来</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> k,<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//算法实现</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;  <span class="comment">//中间元素下标</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二分查找:在一个有序数组中查找具体的某个数</span></span><br><span class="line">    <span class="comment">//如果找到了返回,这个数的下标,找不到的返回-1</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//计算元素个数</span></span><br><span class="line">    <span class="comment">//              传递过去的是数组arr首元素的地址</span></span><br><span class="line">    <span class="type">int</span> ret = binary_search(arr,k,sz);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到了,下标是:%d\n&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当自定义函数把 数组 传进函数体中时，传的是首元素的地址，也就是指针。<br><br></p>
<h1 id="传值调用和传址调用"><a href="#传值调用和传址调用" class="headerlink" title="传值调用和传址调用"></a>传值调用和传址调用</h1><ul>
<li>Add1函数用的是 <strong>传值调用</strong>。</li>
<li>Add2函数用的是 <strong>传址调用</strong>。<br><img src="/zh-CN/images/c/c03005.png"></li>
</ul>
<br>

<h2 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h2><ul>
<li>函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参。<br></li>
</ul>
<h2 id="传址调用"><a href="#传址调用" class="headerlink" title="传址调用"></a>传址调用</h2><ul>
<li>传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式。</li>
<li>这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操<br>作函数外部的变量。</li>
</ul>
<p>练习：写一个函数，每调用一次这个函数，就会将num 的值增加 1。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddNum</span><span class="params">(<span class="type">int</span>* n)</span></span><br><span class="line">&#123;</span><br><span class="line">	*n += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//调用函数，使得num每次增加1</span></span><br><span class="line">		AddNum(&amp;num);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, num);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><img src="/zh-CN/images/c/c03008.png"> </p>
<br>

<h1 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h1><p>函数可以嵌套调用，但是不能嵌套定义。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">new_line</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">three_line</span><span class="params">()</span> <span class="comment">//把前面那个自定义函数放入新的自定义函数中,形成新的函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        new_line(); <span class="comment">//函数可以嵌套调用,但不能嵌套定义。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    three_line();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h1><p>把一个函数的返回值作为另外一个函数的参数。<br>例1:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>　</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);        <span class="comment">//结果为3</span></span><br><span class="line">        <span class="comment">//2</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));  <span class="comment">//结果也是为3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例2:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">43</span>))); </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果是43 2 1  先打印43，然后打印43的返回值，<br>printf()的返回值是它打印的值的个数–&gt;2 ，如此类推最后打印 1 。</p>
<br>

<h1 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h1><p>例1：</p>
<ul>
<li>定义在main函数后面时,要在main函数前面加上: <strong>函数的声明</strong><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;  <span class="comment">//句尾加;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//函数调用</span></span><br><span class="line">        sum = Add(a, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面属于：函数的定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> z = x + y;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果把函数写在main函数前面，这里就可以不用写声明。<br></li>
</ul>
<p>例2：<br><em><strong>函数定义和声明的一般正常用法</strong></em> :</p>
<ol>
<li><p>先分别创建一个add.c和一个add.h的源文件。</p>
</li>
<li><p>把 <strong>函数的定义</strong> 放入add.c的源文件中。</p>
<figure class="highlight c"><figcaption><span>add.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再把 <strong>函数的声明</strong> 放入add.h的源文件中。</p>
<figure class="highlight c"><figcaption><span>add.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ADD_H__   <span class="comment">//判断int main()源文件中是否已经引用过同一个头文件；如果有,则跳到结束</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__   <span class="comment">//如果没有,这里进入引用</span></span></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;   <span class="comment">//声明的引用，句尾加;号</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>             <span class="comment">//引用结束</span></span></span><br></pre></td></tr></table></figure>
<p>这样做可以避免重复引用头文件而导致的:头文件代码不断拷贝到int main()中;使源文件更简洁  </p>
</li>
<li><p>这样就可以在int main()中使用这个自定义函数了。</p>
<figure class="highlight c"><figcaption><span>main.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//引用库函数头文件用&lt;&gt;符号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;add.h&quot;</span>   <span class="comment">//引用自定义函数头文件用&quot;&quot;符号</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        sum = Add(a, b);  <span class="comment">//这里就变可以使用了</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<br>

<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol>
<li>告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体是不是存在，函数<br>声明决定不了。</li>
<li>函数的声明一般出现在函数的使用之前。要满足先声明后使用。</li>
<li>函数的声明一般要放在头文件中的。</li>
</ol>
<br>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol>
<li>函数的定义是指函数的具体实现，交待函数的功能实现。</li>
</ol>
<br>


<h2 id="函数外部分工"><a href="#函数外部分工" class="headerlink" title="函数外部分工"></a>函数外部分工</h2><p>隐藏代码的实现信息:</p>
<ol>
<li><p>写函数代码.c，创建.h头文件，在头文件中对函数进行声明</p>
</li>
<li><p>隐藏.c代码</p>
<ul>
<li>解决方案管理器 - 项目名 - 右键属性</li>
<li>常规 - 配置类型 - 静态库.lib</li>
<li>生成 - 生成解决方案</li>
</ul>
</li>
<li><p>在Debug文件夹中，生成.lib文件</p>
</li>
<li><p>把.h头文件 和 .lib静态库文件 一起复制到主函数文件夹中</p>
</li>
<li><p>主函数 - 解决方案管理器 - 导入现有文件</p>
</li>
<li><p>静态库使用方法：</p>
<ul>
<li>#include “XXXX.h” &#x2F;&#x2F;包含头文件</li>
<li>#pragma comment( lib, “XXXX.lib” ) &#x2F;&#x2F;导入静态库</li>
</ul>
</li>
</ol>
<h1 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h1><p>特点:</p>
<ol>
<li>函数自己调用自身</li>
<li>把大型问题转化为与原问题相似的小问题</li>
<li>少量的代码完成多次的计算<br>总结: 把大事化小<br></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">        main();      <span class="comment">//main()中再使用main()本身(递归),导致死循环打印hehe</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>虽然是死循环,但是它还是会停下来,并提示Stack overflow –&gt;递归常见的错误:栈溢出  </p>
<ul>
<li><p>stack overflow<br>（因为变量是在内存的栈区申请空间，死循环导致栈区空间被耗光了，迫使程序停下来，这就是栈溢出） </p>
</li>
<li><p>内存中分为:</p>
<ul>
<li>栈区: 局部变量、函数形参</li>
<li>堆区: 动态开辟的内存（malloc、calloc）</li>
<li>静态区: 全局变量、static修饰的变量<br>(之后会更新新的文章进行详细介绍，留意更新~)<br></li>
</ul>
</li>
</ul>
<p>练习：<br>接受一个整型值（无符号），按顺序打印它的每一位。例如：输入：123 输出 1 2 3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span>      </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">9</span>)         </span><br><span class="line">    &#123;</span><br><span class="line">        print(n / <span class="number">10</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    print(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以输入:123 为例：<br><img src="/zh-CN/images/c/c03009.png"></p>
<ul>
<li>第一次123&gt;9进去,123&#x2F;10&#x3D;12,第二次12&gt;9再进去,12&#x2F;10&#x3D;1,第三次进去1!&gt;9,跳出递归</li>
<li>第三次时n&#x3D;1跳出,1%10&#x3D;1,打印1,返回上一层12%10&#x3D;2,打印2,再返回上一层123%10&#x3D;3,打印3</li>
<li>所以得出的结果为1 2 3</li>
</ul>
<br>

<p><strong>递归的两个必要条件</strong>：</p>
<ul>
<li>存在限制条件，当满足这个限制条件时，递归便不再继续。</li>
<li>每次递归调用之后，越来越接近这个限制条件。</li>
</ul>
<br>

<h2 id="递归求字符串的长度"><a href="#递归求字符串的长度" class="headerlink" title="递归求字符串的长度"></a>递归求字符串的长度</h2><p>把大事化小</p>
<ul>
<li>思路:<br>my_strlen2(“Skk”);<br>1 + my_strlen(“kk”);<br>1 + 1 + my_strlen(“k”);<br>1 + 1 + 1 + my_strlen(“”);<br>1 + 1 + 1 + 0 &#x3D; 3</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen1</span><span class="params">(<span class="type">char</span>* str)</span> <span class="comment">//非递归</span></span><br><span class="line"><span class="comment">//可以实现求字符串长度,但创建了临时变量,不是递归</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>) <span class="comment">//因为从首元素开始,S不是\0,就记录一次,Skk共3次,count从0加到了3,再返回count的值</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        str++;     <span class="comment">//str++每+一次,往后走一个单位 S -&gt; k -&gt; k -&gt; \0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen2</span><span class="params">(<span class="type">char</span>* str)</span>  <span class="comment">//递归的方法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + my_strlen(str + <span class="number">1</span>);<span class="comment">//这里不能写++,要写+1//最后一次返回1+0,第二次返回1+1,第三次返回1+2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;Skk&quot;</span>;</span><br><span class="line">    <span class="comment">//int len = strlen(arr);  //求字符串长度的 库函数</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, len);</span></span><br><span class="line">    <span class="comment">//模拟实现一个求字符串长度的 自定义函数</span></span><br><span class="line">    <span class="type">int</span> len = my_strlen2(arr); <span class="comment">//arr是数组,数组传参,传过去的不是整个数组,而是第一个元素的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;len=%d\n&quot;</span>, len); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="迭代与递归的区别"><a href="#迭代与递归的区别" class="headerlink" title="迭代与递归的区别"></a>迭代与递归的区别</h2><ul>
<li>迭代：循环是一种迭代。</li>
</ul>
<p>例1：<br>求n的阶乘。（不考虑溢出）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fac1</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//循环的方式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Fac2</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//递归的方式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;        <span class="comment">//例如5，5&gt;1,进去5*Fac2,进去5-1=4，4&gt;1,再进去4*Fac2，如此类推5-4-3-2-1，</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * Fac2(n - <span class="number">1</span>);  <span class="comment">//当1=1返回1，跳出递归，不断返回值,使1*2*3*4*5，最好返回计算结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//求n的阶乘</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ret1 = Fac1(n);<span class="comment">//循环的方式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret1);</span><br><span class="line">    ret2 = Fac2(n);<span class="comment">//递归的方式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例2：<br>求第n个斐波那契数。<br>斐波那契数列：1 1 2 3 5 8 13 21 34 55… 前面两个数之和等于第三个数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Fid1</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 递归 （不推荐）</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (n == <span class="number">3</span>)<span class="comment">//测试第三个斐波那契数的计算次数</span></span><br><span class="line">     &#123;</span><br><span class="line">        count++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Fid(n - <span class="number">1</span>) + Fid(n - <span class="number">2</span>);<span class="comment">//这时用递归就不是便利的方法了    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Fid2</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 非递归</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c = a + b;<span class="comment">//保存结果的变量</span></span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//TDD--测试驱动开发</span></span><br><span class="line">    ret = Fid2(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">    <span class="comment">//printf(&quot;count=%d\n&quot;, count);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的例子，做法不同，也就有了不同的定义<br>迭代法也称辗转法，是一种不断用变量的旧值递推新值的过程，跟迭代法相对应的是直接法(或者称为一次解法)，即一次性解决问题。</p>
<p><strong>迭代和递归的关系和区别</strong>：  </p>
<p>从概念上讲，递归就是指程序调用自身的编程思想，即一个函数调用本身；迭代是利用已知的变量值，根据递推公式不断演进得到变量新值得编程思想。简单地说，递归是重复调用函数自身实现循环。迭代是函数内某段代码实现循环，而迭代与普通循环的区别是：循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。  </p>
<ul>
<li>迭代与普通循环的区别是：<strong>迭代时，循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值</strong>。  </li>
<li>递归与普通循环的区别是：<strong>循环是有去无回，而递归则是有去有回(因为存在终止条件)</strong>。<br>在循环的次数较大的时候，迭代的效率明显高于递归。</li>
</ul>
<br>

<p>应该什么时候用递归？什么时候用循环？<br>两种都可以用，选简单的方式写。但是要注意不能有问题，例如栈溢出，效率慢，这时就不要用递归了。</p>
<p>有些满足两个必要条件的递归，也会发生问题（栈溢出）<br>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 栈溢出</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        test(n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test(<span class="number">1</span>); <span class="comment">// err</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>本章节完，感谢阅览！<br>下一篇文章打算介绍一些经典的递归题，感兴趣的话请持续关注我的更新~   </p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
<li>C库函数样例图出自：<a href="https://cplusplus.com/">https://cplusplus.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语法</tag>
      </tags>
  </entry>
  <entry>
    <title>初次见面，我的第一篇文章</title>
    <url>/zh-CN/2022/11/23/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2%EF%BC%8C%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>自我介绍</li>
<li>目标</li>
<li>分享</li>
<li>我的代码库</li>
</ul>
<span id="more"></span>


<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>大家好，我叫曹建熙。<br>这是我的个人博客，我会在这里分享我学习代码时的理解和心得。  </p>
<p>现在是在日本的留学生，学习计算机知识。<br>性格乐观开朗，爱好是旅行、美食、音乐、钓鱼等。    </p>
<p>大家如果有什么建议或者疑问，都可以通过邮件、微信或者line联系我。  </p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>活到老学到老，希望自己可以一直坚持学习。<br>不断提高自己的技术水平，向大牛们学习。    </p>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>最后分享一些旅行和美食的照片。<br><img src="/zh-CN/images/lvxing_1.png"></p>
<ul>
<li>瑞龙寺</li>
</ul>
<p><img src="/zh-CN/images/lvxing_1_1.png"></p>
<ul>
<li>高冈大佛</li>
</ul>
<p><img src="/zh-CN/images/food_1.png"></p>
<ul>
<li>和牛牛排</li>
</ul>
<h2 id="我的代码库"><a href="#我的代码库" class="headerlink" title="我的代码库"></a>我的代码库</h2><ul>
<li><a href="https://github.com/soukenki">https://github.com/soukenki</a></li>
</ul>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
